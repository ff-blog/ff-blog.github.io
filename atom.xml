<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>老亚瑟博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.ffspace.cn/"/>
  <updated>2020-11-02T02:24:16.710Z</updated>
  <id>https://blog.ffspace.cn/</id>
  
  <author>
    <name>老亚瑟</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Intellij IDEA最新全版本永久激活（亲测有效）</title>
    <link href="https://blog.ffspace.cn/2020/05/21/%E9%9A%8F%E7%AC%94/ideaActivity/"/>
    <id>https://blog.ffspace.cn/2020/05/21/随笔/ideaActivity/</id>
    <published>2020-05-21T11:00:00.000Z</published>
    <updated>2020-11-02T02:24:16.710Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>大家熟知Jetbrains的话应该知道：他们家的所有产品升级到2018.2.1及以上版本后，先前可用的注册服务器都失效了，无法激活升级到最新版本体验最新黑科技。</p><p>这次带给大家的是： Jetbrains全系列产品2020.1.1及以下版本（理论上适用于目前所有新老版本到2089年）激活教程（可以永久激活Windows、MAC、Linux），本教程以win，版本v2019.3进行演示</p><blockquote><p><a href="https://www.jetbrains.com/idea/" target="_blank" rel="noopener">IntelliJ IDEA 官方安装包下载地址</a>（其他版本自行下载）</p></blockquote><blockquote><p><a href="#IDEA-注册机获取地址">IntelliJ IDEA 全版本激活注册机下载地址（见文章末尾）</a></p></blockquote><h2 id="安装并破解IDEA"><a href="#安装并破解IDEA" class="headerlink" title="安装并破解IDEA"></a>安装并破解IDEA</h2><p><br></p><h3 id="1、下载并安装JetBrains-IntelliJ-IDEA"><a href="#1、下载并安装JetBrains-IntelliJ-IDEA" class="headerlink" title="1、下载并安装JetBrains IntelliJ IDEA"></a>1、下载并安装JetBrains IntelliJ IDEA</h3><p><img src="/img/resources/idea_activity/1.jpg" alt="安装步骤"></p><p><img src="/img/resources/idea_activity/2.jpg" alt="安装步骤"></p><p><img src="/img/resources/idea_activity/3.jpg" alt="安装步骤"></p><p><img src="/img/resources/idea_activity/4.jpg" alt="安装步骤"></p><p><br></p><h3 id="2、打开软件，点击“Evaluate”进行试用，然后创建或者打开一个项目工程，进入软件的主界面，如下图所示："><a href="#2、打开软件，点击“Evaluate”进行试用，然后创建或者打开一个项目工程，进入软件的主界面，如下图所示：" class="headerlink" title="2、打开软件，点击“Evaluate”进行试用，然后创建或者打开一个项目工程，进入软件的主界面，如下图所示："></a>2、打开软件，点击“Evaluate”进行试用，然后创建或者打开一个项目工程，进入软件的主界面，如下图所示：</h3><blockquote><p>提示1：如果已经处于试用期（之前试用过而且到期了，可以将之前遗留的配置文件夹删除）。<br>提示2：小编选择的是暗黑模式的皮肤，因此后面步骤均为暗黑色！！！</p></blockquote><blockquote><p>注意：若原先有配置过hosts的请先删除或注释掉以下地址，否则可能破解失败：<br> 0.0.0.0 account.jetbrains.com<br> 0.0.0.0 <a href="http://www.jetbrains.com" target="_blank" rel="noopener">www.jetbrains.com</a></p></blockquote><p><img src="/img/resources/idea_activity/5.jpg" alt="试用IDEA"></p><p><img src="/img/resources/idea_activity/6.jpg" alt="创建或打开一个项目"></p><p><br></p><h3 id="3、将补丁注册机jetbrains-all-zip拖到打开的IntelliJ-IDEA软件界面中，弹出对话框并重启idea，如下图所示"><a href="#3、将补丁注册机jetbrains-all-zip拖到打开的IntelliJ-IDEA软件界面中，弹出对话框并重启idea，如下图所示" class="headerlink" title="3、将补丁注册机jetbrains-all.zip拖到打开的IntelliJ IDEA软件界面中，弹出对话框并重启idea，如下图所示"></a>3、将补丁注册机jetbrains-all.zip拖到打开的IntelliJ IDEA软件界面中，弹出对话框并重启idea，如下图所示</h3><p><img src="/img/resources/idea_activity/7.jpg" alt="注册机"></p><p><img src="/img/resources/idea_activity/8.jpg" alt="重启IDEA"></p><p><br></p><h3 id="4、重启后选择激活方式，并点击激活按钮，再次重启IDEA"><a href="#4、重启后选择激活方式，并点击激活按钮，再次重启IDEA" class="headerlink" title="4、重启后选择激活方式，并点击激活按钮，再次重启IDEA"></a>4、重启后选择激活方式，并点击激活按钮，再次重启IDEA</h3><p><img src="/img/resources/idea_activity/9.jpg" alt="选择激活方式"></p><p><img src="/img/resources/idea_activity/10.jpg" alt="激活成功"></p><p><br></p><h3 id="5、等待IDEA重启后，即可破解成功，如下图所示，点击Help-gt-Register查看破解信息，有效期到2089年"><a href="#5、等待IDEA重启后，即可破解成功，如下图所示，点击Help-gt-Register查看破解信息，有效期到2089年" class="headerlink" title="5、等待IDEA重启后，即可破解成功，如下图所示，点击Help-&gt;Register查看破解信息，有效期到2089年"></a>5、等待IDEA重启后，即可破解成功，如下图所示，点击Help-&gt;Register查看破解信息，有效期到2089年</h3><p><img src="/img/resources/idea_activity/11.jpg" alt="激活成功"></p><p><img src="/img/resources/idea_activity/12.jpg" alt="激活成功"></p><p><br></p><h2 id="IDEA-激活注册机获取"><a href="#IDEA-激活注册机获取" class="headerlink" title="IDEA 激活注册机获取"></a>IDEA 激活注册机获取</h2><p>扫码关注 “技术干货精选” 公众号，并回复 “idea激活” 免费获取<br><img src="/img/resources/gzh.jpg" alt="开发技术精选"></p><blockquote><p>免责声明：软件收集于网络，仅供技术交流，请勿用于商业及非法用途</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;大家熟知Jetbrains的话应该知道：他们家的所有产品升级到2018.2.1及以上版本后，先前可用的注册服务器都失效了，无法激活升级到最新
      
    
    </summary>
    
      <category term="随笔" scheme="https://blog.ffspace.cn/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="idea激活" scheme="https://blog.ffspace.cn/tags/idea%E6%BF%80%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>Feign微服务间通过@RequestBody进行文件传输</title>
    <link href="https://blog.ffspace.cn/2019/12/08/Feign%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%97%B4%E9%80%9A%E8%BF%87@RequestBody%E8%BF%9B%E8%A1%8C%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93/"/>
    <id>https://blog.ffspace.cn/2019/12/08/Feign微服务间通过@RequestBody进行文件传输/</id>
    <published>2019-12-08T08:00:00.000Z</published>
    <updated>2020-11-02T02:24:16.703Z</updated>
    
    <content type="html"><![CDATA[<p>在多数时候，我们都会遇见两个系统间传递文件的需求，对于这种文件传输，在之前单体应用/部署在同一台机子的时候比较好处理。</p><p>但是如今在微服务的时代，不同业务拆分成不同的模块系统，同时有可能部署在不同的服务器上，这时候要进行两个服务间传输文件就会相对困难，但并不是没有解决方案：</p><ul><li>1、采用oss存储作为唯一媒介，将文件上传到oss上，然后再进行获取</li><li>2、使用feign的直接传输，但是必须得引入 feign-form 来进行传输</li><li>3、就是写一个Encoder解析器</li></ul><p>上面介绍的这几种相对来说比较复杂，但都是可以解决微服务系统间文件传输的问题。而今天我们要介绍的另外一种方案就是直接将文件转为byte，通过普通的@RequestBody形式（即json格式）进行文件传输，该方案可能不太适用于更复杂的场景，但也是笔者在写代码时候发现的另一种方法。</p><h2 id="二、具体实现"><a href="#二、具体实现" class="headerlink" title="二、具体实现"></a>二、具体实现</h2><p>1、本文将介绍使用feign从spring-feign-demo1 以 json形式传递文件到spring-feign-demo2的关键性代码</p><h4 id="在spring-cloud-demo2中编写用于接收文件的DTO和Controller。"><a href="#在spring-cloud-demo2中编写用于接收文件的DTO和Controller。" class="headerlink" title="在spring-cloud-demo2中编写用于接收文件的DTO和Controller。"></a>在spring-cloud-demo2中编写用于接收文件的DTO和Controller。</h4><p>1、Controller层<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class FeignController &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 接收文件</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(value = &quot;/feign/send/file&quot;, method = &#123;RequestMethod.POST&#125;)</span><br><span class="line">    @ResponseBody</span><br><span class="line">    public String performController(@RequestBody FeignRequestDTO requestDTO) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            // 将demo1的文件流保存到该服务器的指定目录下</span><br><span class="line">            // 注意：文件名和格式可以通过请求参数定义一个字段传输，这里不做演示</span><br><span class="line">            File file = new File(&quot;D:\\demo2\\新demo1的文件.xlsx&quot;);</span><br><span class="line">            FileUtils.writeByteArrayToFile(file,requestDTO.getFile());</span><br><span class="line">            System.out.println(&quot;成功接收来自demo1的文件&quot;);</span><br><span class="line">            // todo 读取demo2服务器的文件继续业务处理即可</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return &quot;true&quot;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>2、demo2的RequestDTO请求对象如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">public class FeignRequestDTO &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 用户编号</span><br><span class="line">     */</span><br><span class="line">    private String userId;</span><br><span class="line"></span><br><span class="line">    public String getUserId() &#123;return userId;&#125;</span><br><span class="line"></span><br><span class="line">    public void setUserId(String userId) &#123; this.userId = userId;&#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 用户名</span><br><span class="line">     */</span><br><span class="line">    private String userName;</span><br><span class="line"></span><br><span class="line">    public String getUserName() &#123; return userName;&#125;</span><br><span class="line"></span><br><span class="line">    public void setUserName(String userName) &#123;this.userName = userName;&#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 文件流（关键字段）</span><br><span class="line">     */</span><br><span class="line">    private byte[] file;</span><br><span class="line"></span><br><span class="line">    public byte[] getFile() &#123;return file;&#125;</span><br><span class="line"></span><br><span class="line">    public void setFile(byte[] file) &#123;this.file = file;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="在spring-cloud-demo1中编写调用Demo2的Feign接口并调用。"><a href="#在spring-cloud-demo1中编写调用Demo2的Feign接口并调用。" class="headerlink" title="在spring-cloud-demo1中编写调用Demo2的Feign接口并调用。"></a>在spring-cloud-demo1中编写调用Demo2的Feign接口并调用。</h4><p>1、Feign接口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">@FeignClient(name = &quot;spring-cloud-demo2&quot;)</span><br><span class="line">public interface FeignDemo2Interface &#123;</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * feign的对外接口请求方法</span><br><span class="line">   *</span><br><span class="line">   * @param requestDTO</span><br><span class="line">   * @return</span><br><span class="line">   */</span><br><span class="line">  @RequestMapping(value = &quot;/feign/send/file&quot;, method = &#123;RequestMethod.POST&#125;)</span><br><span class="line">  @ResponseBody</span><br><span class="line">  String performController(@RequestBody FeignRequestDTO requestDTO);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2、demo1中的发送文件到的demo2的Controller<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class FeignDemo1Controller &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private FeignDemo2Interface feignDemo2Interface;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 处理请求</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(value = &quot;/feign/demo1/test&quot;, method = &#123;RequestMethod.GET&#125;)</span><br><span class="line">    @ResponseBody</span><br><span class="line">    public void performController() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            // 读取该服务器本地的文件并转换为byte</span><br><span class="line">          byte[] bytes = FileUtils.readFileToByteArray(new File(&quot;D:\\demo1\\demo1的文件.xlsx&quot;));</span><br><span class="line">          // 引用demo2的对象将读取的文件进行封装，并调用demo2的方法</span><br><span class="line">            FeignRequestDTO requestDTO = new FeignRequestDTO();</span><br><span class="line">            requestDTO.setUserId(&quot;10000&quot;);</span><br><span class="line">            requestDTO.setUserName(&quot;张三&quot;);</span><br><span class="line">            requestDTO.setFile(bytes);</span><br><span class="line">          String s = feignDemo2Interface.performController(requestDTO);</span><br><span class="line">          System.out.println(&quot;发送文件成功&quot;);</span><br><span class="line"></span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h2 id="三、结果"><a href="#三、结果" class="headerlink" title="三、结果"></a>三、结果</h2><p>1、调用demo1的controller后，即可将文件通过feign发送给demo2。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在多数时候，我们都会遇见两个系统间传递文件的需求，对于这种文件传输，在之前单体应用/部署在同一台机子的时候比较好处理。&lt;/p&gt;
&lt;p&gt;但是如今在微服务的时代，不同业务拆分成不同的模块系统，同时有可能部署在不同的服务器上，这时候要进行两个服务间传输文件就会相对困难，但并不是没
      
    
    </summary>
    
      <category term="后端" scheme="https://blog.ffspace.cn/categories/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="Spring Cloud" scheme="https://blog.ffspace.cn/categories/%E5%90%8E%E7%AB%AF/Spring-Cloud/"/>
    
    
      <category term="后端" scheme="https://blog.ffspace.cn/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Java使用Tess4J 实现简单的图像识别(Maven版)</title>
    <link href="https://blog.ffspace.cn/2019/10/08/%E9%9A%8F%E7%AC%94/Java%E4%BD%BF%E7%94%A8Tess4J%20%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB(Maven%E7%89%88)/"/>
    <id>https://blog.ffspace.cn/2019/10/08/随笔/Java使用Tess4J 实现简单的图像识别(Maven版)/</id>
    <published>2019-10-08T05:00:00.000Z</published>
    <updated>2020-11-02T02:24:16.709Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>最近有个朋友需要用Java做一个图像识别的东西，因此帮忙参考了网上资料写了一个基于Tess4J简单版的图像识别demo，供参考。</p><h2 id="二、简单实例"><a href="#二、简单实例" class="headerlink" title="二、简单实例"></a>二、简单实例</h2><h4 id="1、首先创建一个新的maven项目（创建教程在此省略，自行百度），将所需jar包引入pom-xml"><a href="#1、首先创建一个新的maven项目（创建教程在此省略，自行百度），将所需jar包引入pom-xml" class="headerlink" title="1、首先创建一个新的maven项目（创建教程在此省略，自行百度），将所需jar包引入pom.xml"></a>1、首先创建一个新的maven项目（创建教程在此省略，自行百度），将所需jar包引入pom.xml</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;net.sourceforge.tess4j&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;tess4j&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;4.4.0&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"> &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><h4 id="2、在任意地方创建一个文件夹tessdata，将下载的chi-sim-traineddata-和-eng-traineddata语言包存放在该目录下，也可以直接存放到自己项目的resources-tessdata目录下。"><a href="#2、在任意地方创建一个文件夹tessdata，将下载的chi-sim-traineddata-和-eng-traineddata语言包存放在该目录下，也可以直接存放到自己项目的resources-tessdata目录下。" class="headerlink" title="2、在任意地方创建一个文件夹tessdata，将下载的chi_sim.traineddata 和 eng.traineddata语言包存放在该目录下，也可以直接存放到自己项目的resources/tessdata目录下。"></a>2、在任意地方创建一个文件夹tessdata，将下载的chi_sim.traineddata 和 eng.traineddata语言包存放在该目录下，也可以直接存放到自己项目的resources/tessdata目录下。</h4><blockquote><p>语言库下载地址：<a href="https://github.com/tesseract-ocr/tessdata" target="_blank" rel="noopener">https://github.com/tesseract-ocr/tessdata</a><br><img src="/img/resources/tess4j/1.png" alt="语言库地址"></p></blockquote><h4 id="3、编写代码"><a href="#3、编写代码" class="headerlink" title="3、编写代码"></a>3、编写代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"> // 识别图片的路径（修改为自己的图片路径）</span><br><span class="line">String path = &quot;D:\\test.jpg&quot;;</span><br><span class="line"></span><br><span class="line">// 语言库位置（修改为跟自己语言库文件夹的路径）</span><br><span class="line">String lagnguagePath = &quot;D:\\tessdata&quot;;</span><br><span class="line"></span><br><span class="line">File file = new File(path);</span><br><span class="line">ITesseract instance = new Tesseract();</span><br><span class="line"></span><br><span class="line">//设置训练库的位置</span><br><span class="line">instance.setDatapath(lagnguagePath);</span><br><span class="line"></span><br><span class="line">//chi_sim ：简体中文， eng根据需求选择语言库</span><br><span class="line">instance.setLanguage(&quot;eng&quot;);</span><br><span class="line">String result = null;</span><br><span class="line">try &#123;</span><br><span class="line">    long startTime = System.currentTimeMillis();</span><br><span class="line">    result =  instance.doOCR(file);</span><br><span class="line">    long endTime = System.currentTimeMillis();</span><br><span class="line">    System.out.println(&quot;Time is：&quot; + (endTime - startTime) + &quot; 毫秒&quot;);</span><br><span class="line">&#125; catch (TesseractException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;result: &quot;);</span><br><span class="line">System.out.println(result);</span><br></pre></td></tr></table></figure><h4 id="4、测试"><a href="#4、测试" class="headerlink" title="4、测试"></a>4、测试</h4><p>本文以一张简单的图片为例：图片放置在D:\test.png根目录下，因此使用代码测试前需要修改代码中指定的两个路径！！！</p><h5 id="识别图片："><a href="#识别图片：" class="headerlink" title="识别图片："></a>识别图片：</h5><p><img src="/img/resources/tess4j/2.png" alt="测试"></p><h5 id="运行代码后："><a href="#运行代码后：" class="headerlink" title="运行代码后："></a>运行代码后：</h5><p><img src="/img/resources/tess4j/3.png" alt="识别后"></p><h4 id="5、可选步骤：配置环境变量（TESSDATA-PREFIX）"><a href="#5、可选步骤：配置环境变量（TESSDATA-PREFIX）" class="headerlink" title="5、可选步骤：配置环境变量（TESSDATA_PREFIX）"></a>5、可选步骤：配置环境变量（TESSDATA_PREFIX）</h4><p>环境变量地址指向你存放语言包的文件夹路径，如：我的语言包路径在 D:\tessdata<br><img src="/img/resources/tess4j/4.png" alt="环境变量"></p><blockquote><p>本文代码参考自：<a href="https://blog.csdn.net/zai_xia/article/details/80003778" target="_blank" rel="noopener">https://blog.csdn.net/zai_xia/article/details/80003778</a></p></blockquote><blockquote><p><strong>往期系列文章：</strong><br><a href="https://blog.ffspace.cn/categories/%E5%90%8E%E7%AB%AF/Spring-Security/">Spring Security系列教程</a><br><a href="https://blog.ffspace.cn/2019/08/09/elk/Spring%20Boot%20%E9%9B%86%E6%88%90%20ELK%20+%20logback%20%E5%AE%9E%E7%8E%B0%E6%97%A5%E5%BF%97%E9%87%87%E9%9B%86/">ELK日志采集整合教程</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h2&gt;&lt;p&gt;最近有个朋友需要用Java做一个图像识别的东西，因此帮忙参考了网上资料写了一个基于Tess4J简单版的图像识别demo，供参
      
    
    </summary>
    
      <category term="随笔" scheme="https://blog.ffspace.cn/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="java" scheme="https://blog.ffspace.cn/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ 3.7快速安装教程</title>
    <link href="https://blog.ffspace.cn/2019/08/11/RabbitMQ%203.7%E5%BF%AB%E9%80%9F%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    <id>https://blog.ffspace.cn/2019/08/11/RabbitMQ 3.7快速安装教程/</id>
    <published>2019-08-11T14:19:00.000Z</published>
    <updated>2020-11-02T02:24:16.703Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><p>RabbitMQ是实现了高级消息队列协议（AMQP）的开源消息代理软件（亦称面向消息的中间件）。RabbitMQ服务器是用Erlang语言编写的，而集群和故障转移是构建在开放电信平台框架上的。所有主要的编程语言均有与代理接口通讯的客户端库。</p><h1 id="二、准备工作"><a href="#二、准备工作" class="headerlink" title="二、准备工作"></a>二、准备工作</h1><p>1、rabbitmq-server-3.7.17.exe <a href="https://www.rabbitmq.com/download.html" target="_blank" rel="noopener">官网下载</a><br>2、otp_win64_22.0.exe <a href="https://www.erlang.org/downloads" target="_blank" rel="noopener">官网下载</a></p><h1 id="三、下载安装包"><a href="#三、下载安装包" class="headerlink" title="三、下载安装包"></a>三、下载安装包</h1><p>1、首先我们需要准备一个rabbitmq的安装包和Erlang安装包，若没有则百度搜索进入官网页面进行下载。</p><p><img src="/img/resources/rabbitmq/1.png" alt="rabbitMQ下载"></p><p><img src="/img/resources/rabbitmq/2.png" alt="rabbitMQ下载"></p><p>2、为什么还要下载Erlang？</p><p>这是应为rabbit是基于erlang语言开发的程序，所以提示我们缺少这个运行环境，此时我们直接点击确定进入erlang下载页面，根据自己的系统版本下载安装包。</p><p><img src="/img/resources/rabbitmq/3.png" alt="Erlang下载"></p><h1 id="三、开始安装"><a href="#三、开始安装" class="headerlink" title="三、开始安装"></a>三、开始安装</h1><p>1、安装包准备好友，首先运行安装Erlang安装程序（注意安装在中文路径下）。</p><p>2、按照步骤一直点击Next，中间可以选择更换安装路径，但不能是中文路径，点击“Install”后等待安装完成即可点击“Close”关闭。</p><p><img src="/img/resources/rabbitmq/4.png" alt="Erlang安装步骤"></p><p><img src="/img/resources/rabbitmq/5.png" alt="Erlang安装步骤"></p><p><img src="/img/resources/rabbitmq/6.png" alt="Erlang安装步骤"></p><p><img src="/img/resources/rabbitmq/7.png" alt="Erlang安装步骤"></p><p>3、安装完Erlang程序后，接着我们直接双击打开rabbitMQ安装程序（注意不能安装在中文路径下），按照步骤一直点击Next，中间可以选择更换安装路径，但不能是中文路径，点击“Install”后等待安装完成即可点击“Finish”关闭。</p><p><img src="/img/resources/rabbitmq/8.png" alt="rabbitMQ安装步骤"></p><p><img src="/img/resources/rabbitmq/9.png" alt="rabbitMQ安装步骤"></p><p><img src="/img/resources/rabbitmq/10.png" alt="rabbitMQ安装步骤"></p><p><img src="/img/resources/rabbitmq/11.png" alt="rabbitMQ安装步骤"></p><h1 id="四、最后配置"><a href="#四、最后配置" class="headerlink" title="四、最后配置"></a>四、最后配置</h1><p>1、到第三步步后，rabbit就已经安装按成了，而且一般完成后，rabbitmq会自动开启。</p><p>2、但是RabbitMQ安装后默认是不启动管理模块的，所以需要配置将管理模块启动，才可以通过浏览器访问：localhost:15672，命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 若没有配置环境变量，运行命令时需要在安装rabbitmq目录下的sbin文件夹执行</span><br><span class="line">rabbitmqctl start_app</span><br><span class="line">rabbitmq-plugins enable rabbitmq_management</span><br><span class="line">rabbitmqctl stop</span><br><span class="line">// 注意：每次运行完买那个了需要重启rabbitmq，以生效</span><br></pre></td></tr></table></figure><p>3、配置完成后直接浏览器访问：localhost:15672，能够进入到如下页面则表示rabbitmq安装完成！！！</p><p><img src="/img/resources/rabbitmq/12.png" alt="安装完成"></p><p>默认用户名和密码均是：guest</p><h1 id="五、运行rabbitMQ被立刻停止解决方案（作者遇到的问题之一）"><a href="#五、运行rabbitMQ被立刻停止解决方案（作者遇到的问题之一）" class="headerlink" title="五、运行rabbitMQ被立刻停止解决方案（作者遇到的问题之一）"></a>五、运行rabbitMQ被立刻停止解决方案（作者遇到的问题之一）</h1><p>rabbitmq在windows下运行后立马停止的问题为log和数据库存在中文路径导致的，可以根据如下命令解决：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 停止服务，然后执行以下3条语句：</span><br><span class="line">rabbitmq-service.bat remove </span><br><span class="line">set RABBITMQ_BASE=D:\install3\rabbitmq\rabbitmq_server-3.7.8\data</span><br><span class="line">rabbitmq-service.bat install</span><br></pre></td></tr></table></figure><blockquote><p><strong>推荐阅读：</strong><br><a href="https://blog.ffspace.cn/categories/%E5%90%8E%E7%AB%AF/Spring-Security/">Spring Security系列教程</a><br><a href="https://blog.ffspace.cn/2019/08/09/elk/Spring%20Boot%20%E9%9B%86%E6%88%90%20ELK%20+%20logback%20%E5%AE%9E%E7%8E%B0%E6%97%A5%E5%BF%97%E9%87%87%E9%9B%86/">Spring Boot 集成 ELK + logback 实现日志采集</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、简介&quot;&gt;&lt;a href=&quot;#一、简介&quot; class=&quot;headerlink&quot; title=&quot;一、简介&quot;&gt;&lt;/a&gt;一、简介&lt;/h1&gt;&lt;p&gt;RabbitMQ是实现了高级消息队列协议（AMQP）的开源消息代理软件（亦称面向消息的中间件）。RabbitMQ服务器是用E
      
    
    </summary>
    
      <category term="后端" scheme="https://blog.ffspace.cn/categories/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="RabbitMQ" scheme="https://blog.ffspace.cn/categories/%E5%90%8E%E7%AB%AF/RabbitMQ/"/>
    
    
      <category term="RabbitMQ" scheme="https://blog.ffspace.cn/tags/RabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 集成 ELK + logback 实现日志采集</title>
    <link href="https://blog.ffspace.cn/2019/08/09/elk/Spring%20Boot%20%E9%9B%86%E6%88%90%20ELK%20+%20logback%20%E5%AE%9E%E7%8E%B0%E6%97%A5%E5%BF%97%E9%87%87%E9%9B%86/"/>
    <id>https://blog.ffspace.cn/2019/08/09/elk/Spring Boot 集成 ELK + logback 实现日志采集/</id>
    <published>2019-08-09T02:28:00.000Z</published>
    <updated>2020-11-02T02:24:16.707Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ELK简介"><a href="#ELK简介" class="headerlink" title="ELK简介"></a>ELK简介</h1><p>ELK是三个开源软件的缩写，分别表示：Elasticsearch , Logstash, Kibana , 它们都是开源软件。</p><p>Elasticsearch：是个开源分布式搜索引擎，提供搜集、分析、存储数据三大功能。它的特点有：分布式，零配置，自动发现，索引自动分片，索引副本机制，restful风格接口，多数据源，自动搜索负载等。</p><p>Logstash：主要是用来日志的搜集、分析、过滤日志的工具，支持大量的数据获取方式。一般工作方式为c/s架构，client端安装在需要收集日志的主机上，server端负责将收到的各节点日志进行过滤、修改等操作在一并发往elasticsearch上去。</p><p>Kibana：也是一个开源和免费的工具，Kibana可以为 Logstash 和 ElasticSearch 提供的日志分析友好的 Web 界面，可以帮助汇总、分析和搜索重要数据日志。</p><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>1、jdk8</p><p>2、elasticsearch-6.4.2.tar.gz 地址：<a href="https://www.elastic.co/downloads/elasticsearch" target="_blank" rel="noopener">https://www.elastic.co/downloads/elasticsearch</a></p><p>3、logstash-6.4.2.tar.gz 地址：<a href="https://www.elastic.co/downloads/logstash" target="_blank" rel="noopener">https://www.elastic.co/downloads/logstash</a></p><p>4、kibana-6.4.2-linux-x86_64.tar.gz 地址：<a href="https://www.elastic.co/downloads/kibana" target="_blank" rel="noopener">https://www.elastic.co/downloads/kibana</a></p><h1 id="一、部署-配置ELK"><a href="#一、部署-配置ELK" class="headerlink" title="一、部署+配置ELK"></a>一、部署+配置ELK</h1><h4 id="安装-jdk"><a href="#安装-jdk" class="headerlink" title="安装 jdk"></a>安装 jdk</h4><p>linux 如何安装 jdk1.8 可参照其他网友贡献的文档  <a href="https://blog.csdn.net/qq250782929/article/details/51603276" target="_blank" rel="noopener">https://blog.csdn.net/qq250782929/article/details/51603276</a></p><p>配置 jdk 环境变量</p><pre><code>export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_31 export JRE_HOME=${JAVA_HOME}/jre export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib export PATH=${JAVA_HOME}/bin:$PATH </code></pre><p>source /etc/profile 配置环境变量升效</p><h4 id="安装-elasticsearch"><a href="#安装-elasticsearch" class="headerlink" title="安装 elasticsearch"></a>安装 elasticsearch</h4><p>elasticsearch 不能用root账户启动，因此，需要增加一个账户es</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">useradd -m es</span><br><span class="line">passwd es </span><br><span class="line">es</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">root#</span> tar -xvf elasticsearch-6.4.2.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="meta">root#</span> cp -rf elasticsearch-6.4.2 /home/es</span><br><span class="line"></span><br><span class="line"><span class="meta">root#</span> chown -R es.es /home/es/elasticsearch-6.4.2</span><br><span class="line"></span><br><span class="line"><span class="meta">es$</span>  nohup /home/es/elasticsearch-6.4.2/bin/elasticsearch &amp;</span><br></pre></td></tr></table></figure><p>启动过程遇到下问题</p><p>`[1]: max file descriptors [4096] for elasticsearch process is too low, increase to at least [65536]</p><p>`[2]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</p><p>请参照网友提供的解决方案：<br> <a href="https://blog.csdn.net/feinifi/article/details/73633235?utm_source=itdadao&amp;utm_medium=referral" target="_blank" rel="noopener">https://blog.csdn.net/feinifi/article/details/73633235?utm_source=itdadao&amp;utm_medium=referral</a></p><p>`[3]: max number of threads [3895] for user [elk] is too low, increase to at least [4096]</p><p>修改/etc/security/limits.conf文件，添加或修改如下行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*        hard    nproc           4096</span><br><span class="line">*        soft    nproc           4096</span><br></pre></td></tr></table></figure></p><p>重新启动<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">es$</span>  nohup /home/es/elasticsearch-6.4.2/bin/elasticsearch &amp;</span><br></pre></td></tr></table></figure></p><p>更多elasticsearch配置<br><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/logging.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/logging.html</a></p><h4 id="安装-logstash"><a href="#安装-logstash" class="headerlink" title="安装 logstash"></a>安装 logstash</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">useradd -m elk</span><br><span class="line">passwd elk </span><br><span class="line">elk</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">root#</span> tar -zxvf logstash-6.1.0.tar.gz</span><br><span class="line"><span class="meta">root#</span> cp -rf logstash-6.1.0/home/elk</span><br><span class="line"><span class="meta">root#</span> chown -R elk.elk /home/elk/logstash-6.1.0</span><br><span class="line"><span class="meta">elk$</span>  touch /home/elk/logstash-6.1.0/config/logstash-simple.conf</span><br><span class="line"><span class="meta">elk$</span> ./bin/logstash -f ./config/logstash-simple.conf</span><br></pre></td></tr></table></figure><p>在config 下配置一个simple.conf配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">input &#123;</span><br><span class="line">  tcp &#123;</span><br><span class="line">    mode =&gt; &quot;server&quot;</span><br><span class="line">    host =&gt; &quot;本机ip&quot;</span><br><span class="line">    port =&gt; 9250</span><br><span class="line">  &#125;</span><br><span class="line">  stdin &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  elasticsearch &#123;</span><br><span class="line">    action =&gt; &quot;index&quot;         </span><br><span class="line">    hosts  =&gt; &quot;ip:9200&quot;   </span><br><span class="line">index =&gt; &quot;logstash-demo&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  stdout &#123;</span><br><span class="line">    codec =&gt; rubydebug  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="安装-kinbana"><a href="#安装-kinbana" class="headerlink" title="安装 kinbana"></a>安装 kinbana</h4><p>使用命令解压（根据自己的文件名称进行解压）：<br>tar -zxvf kibana-6.4.2-linux-x86_64.tar.gz</p><p>修改配置文件:<br>cd /kibana/kibana-6.4.2-linux-x86_64/config/kibana.yml</p><p>【修改标注的这三个参数即可】<br>    server.port: 5601   端口<br>    server.host: （linux对应的ip地址）<br>    elasticsearch.url: “<a href="http://xxx.xxx.xxx.xxx:9200&quot;（根据es配置地址和端口进行配置）" target="_blank" rel="noopener">http://xxx.xxx.xxx.xxx:9200&quot;（根据es配置地址和端口进行配置）</a></p><p>启动：返回解压后<br>cd /kibana/kibana-6.4.2-linux-x86_64/bin </p><p>执行：<br>./kibana  //不能关闭终端<br>nohup  ./kibana &gt; /nohub.out &amp;  //可关闭终端，在nohup.out中查看log</p><h5 id="备注：如果不能正常访问则使用firewall开放linux端口"><a href="#备注：如果不能正常访问则使用firewall开放linux端口" class="headerlink" title="备注：如果不能正常访问则使用firewall开放linux端口"></a>备注：如果不能正常访问则使用firewall开放linux端口</h5><p>1、执行如下命令命令：firewall-cmd –zone=public –add-port=5601/tcp –permanent</p><p>2、重启防火墙，运行命令：firewall-cmd –reload</p><p>3、查看端口号是否开启，运行命令：firewall-cmd –query-port=5601/tcp</p><h1 id="二、如何在Logback-xml中集成logstash"><a href="#二、如何在Logback-xml中集成logstash" class="headerlink" title="二、如何在Logback.xml中集成logstash"></a>二、如何在Logback.xml中集成logstash</h1><h4 id="1、在pom文件中引入jar包"><a href="#1、在pom文件中引入jar包" class="headerlink" title="1、在pom文件中引入jar包"></a>1、在pom文件中引入jar包</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> &lt;parent&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.0.5.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;relativePath/&gt;</span><br><span class="line">&lt;/parent&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;net.logstash.logback&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;logstash-logback-encoder&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h4 id="2、在logback-spring-xml中配置"><a href="#2、在logback-spring-xml中配置" class="headerlink" title="2、在logback-spring.xml中配置"></a>2、在logback-spring.xml中配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;!-- 使用下方日志输出格式必须引入默认的xml --&gt;</span><br><span class="line">    &lt;include resource=&quot;org/springframework/boot/logging/logback/defaults.xml&quot;/&gt;</span><br><span class="line">    &lt;springProperty scope=&quot;context&quot; name=&quot;springAppName&quot; source=&quot;spring.application.name&quot;/&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!-- 控制台的日志输出样式 --&gt;</span><br><span class="line">    &lt;property name=&quot;CONSOLE_LOG_PATTERN&quot;</span><br><span class="line">              value=&quot;$&#123;CONSOLE_LOG_PATTERN:-%clr(%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;)&#123;faint&#125; %clr($&#123;LOG_LEVEL_PATTERN:-%5p&#125;)</span><br><span class="line">              %clr($&#123;PID:- &#125;)&#123;magenta&#125; %clr(---)&#123;faint&#125; %clr([%15.15t])&#123;faint&#125; %clr(%-40.40logger&#123;39&#125;)&#123;cyan&#125;</span><br><span class="line">              %clr(:)&#123;faint&#125; %m%n$&#123;LOG_EXCEPTION_CONVERSION_WORD:-%wEx&#125;&#125;&quot; /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 控制台输出 --&gt;</span><br><span class="line">    &lt;appender name=&quot;console&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;</span><br><span class="line">        &lt;filter class=&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;&gt;</span><br><span class="line">            &lt;level&gt;INFO&lt;/level&gt;</span><br><span class="line">        &lt;/filter&gt;</span><br><span class="line">        &lt;!-- 日志输出编码 --&gt;</span><br><span class="line">        &lt;encoder&gt;</span><br><span class="line">            &lt;pattern&gt;$&#123;CONSOLE_LOG_PATTERN&#125;&lt;/pattern&gt;</span><br><span class="line">        &lt;/encoder&gt;</span><br><span class="line">    &lt;/appender&gt;</span><br><span class="line"></span><br><span class="line">    &lt;appender name=&quot;STDERR&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;</span><br><span class="line">        &lt;target&gt;System.err&lt;/target&gt;</span><br><span class="line">        &lt;encoder&gt;</span><br><span class="line">            &lt;pattern&gt;$&#123;CONSOLE_LOG_PATTERN&#125;&lt;/pattern&gt;</span><br><span class="line">        &lt;/encoder&gt;</span><br><span class="line">    &lt;/appender&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- This is the kafkaAppender --&gt;</span><br><span class="line">    &lt;appender name=&quot;kafkaAppender&quot; class=&quot;com.github.danielwegener.logback.kafka.KafkaAppender&quot;&gt;</span><br><span class="line">        &lt;filter class=&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;&gt;</span><br><span class="line">            &lt;level&gt;INFO&lt;/level&gt;</span><br><span class="line">        &lt;/filter&gt;</span><br><span class="line">        &lt;encoder class=&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;&gt;</span><br><span class="line">            &lt;pattern&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                &quot;severity&quot;: &quot;%level&quot;,</span><br><span class="line">                &quot;service&quot;: &quot;$&#123;springAppName:-&#125;&quot;,</span><br><span class="line">                &quot;trace&quot;: &quot;%X&#123;X-B3-TraceId:-&#125;&quot;,</span><br><span class="line">                &quot;span&quot;: &quot;%X&#123;X-B3-SpanId:-&#125;&quot;,</span><br><span class="line">                &quot;exportable&quot;: &quot;%X&#123;X-Span-Export:-&#125;&quot;,</span><br><span class="line">                &quot;pid&quot;: &quot;$&#123;PID:-&#125;&quot;,</span><br><span class="line">                &quot;thread&quot;: &quot;%thread&quot;,</span><br><span class="line">                &quot;class&quot;: &quot;%logger&#123;40&#125;&quot;,</span><br><span class="line">                &quot;message&quot;: &quot;%message&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &lt;/pattern&gt;</span><br><span class="line">        &lt;/encoder&gt;</span><br><span class="line">        &lt;topic&gt;topic-logback&lt;/topic&gt;</span><br><span class="line">        &lt;keyingStrategy class=&quot;com.github.danielwegener.logback.kafka.keying.NoKeyKeyingStrategy&quot; /&gt;</span><br><span class="line">        &lt;deliveryStrategy class=&quot;com.github.danielwegener.logback.kafka.delivery.AsynchronousDeliveryStrategy&quot; /&gt;</span><br><span class="line">        &lt;!-- Optional parameter to use a fixed partition --&gt;</span><br><span class="line">        &lt;!-- &lt;partition&gt;0&lt;/partition&gt; --&gt;</span><br><span class="line">        &lt;!-- Optional parameter to include log timestamps into the kafka message --&gt;</span><br><span class="line">        &lt;!-- &lt;appendTimestamp&gt;true&lt;/appendTimestamp&gt; --&gt;</span><br><span class="line">        &lt;!-- bootstrap.servers is the only mandatory producerConfig --&gt;</span><br><span class="line">        &lt;producerConfig&gt;bootstrap.servers=ip:9092&lt;/producerConfig&gt;</span><br><span class="line">        &lt;!-- this is the fallback appender if kafka is not available. --&gt;</span><br><span class="line">        &lt;appender-ref ref=&quot;STDERR&quot; /&gt;</span><br><span class="line">    &lt;/appender&gt;</span><br><span class="line"></span><br><span class="line">    &lt;root level=&quot;INFO&quot;&gt;</span><br><span class="line">        &lt;appender-ref ref=&quot;console&quot;/&gt;</span><br><span class="line">        &lt;appender-ref ref=&quot;kafkaAppender&quot;/&gt;</span><br><span class="line">    &lt;/root&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><p>注意：配置文件中的<topic></topic>必须在logstash配置文件topic或topic-pattern能够匹配到才会从kafka读取到消息</p><h1 id="配置完成后启动"><a href="#配置完成后启动" class="headerlink" title="配置完成后启动"></a>配置完成后启动</h1><p>1、启动elk：elasticsearch -&gt; logstash -&gt; kibana 必须根据启动顺序进行启动</p><p>2、测试发送日志</p><blockquote><p><strong>推荐阅读：</strong><br><a href="https://blog.ffspace.cn/categories/%E5%90%8E%E7%AB%AF/Spring-Security/">Spring Security系列教程</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ELK简介&quot;&gt;&lt;a href=&quot;#ELK简介&quot; class=&quot;headerlink&quot; title=&quot;ELK简介&quot;&gt;&lt;/a&gt;ELK简介&lt;/h1&gt;&lt;p&gt;ELK是三个开源软件的缩写，分别表示：Elasticsearch , Logstash, Kibana , 它们都是
      
    
    </summary>
    
      <category term="后端" scheme="https://blog.ffspace.cn/categories/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="Spring Boot" scheme="https://blog.ffspace.cn/categories/%E5%90%8E%E7%AB%AF/Spring-Boot/"/>
    
    
      <category term="Spring" scheme="https://blog.ffspace.cn/tags/Spring/"/>
    
      <category term="Spring Boot" scheme="https://blog.ffspace.cn/tags/Spring-Boot/"/>
    
      <category term="日志采集" scheme="https://blog.ffspace.cn/tags/%E6%97%A5%E5%BF%97%E9%87%87%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>如何快速在github上创建新分支</title>
    <link href="https://blog.ffspace.cn/2019/06/12/%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E5%9C%A8github%E4%B8%8A%E5%88%9B%E5%BB%BA%E6%96%B0%E5%88%86%E6%94%AF/"/>
    <id>https://blog.ffspace.cn/2019/06/12/如何快速在github上创建新分支/</id>
    <published>2019-06-12T14:30:00.000Z</published>
    <updated>2020-11-02T02:24:16.708Z</updated>
    
    <content type="html"><![CDATA[<p>现阶段网上大部分搜索出来的如何在github上直接创建分支的方式，都是讲直接在项目或者git上创建分支后再push上去即可创建。这虽然也是一种方式之一，但是有时候我们希望能够像国内一样直接在仓库上进行创建。本篇文章将告诉你！！！</p><h4 id="步骤一：打开github官网，选择一个要新增分支的git仓库（若没有则创建）"><a href="#步骤一：打开github官网，选择一个要新增分支的git仓库（若没有则创建）" class="headerlink" title="步骤一：打开github官网，选择一个要新增分支的git仓库（若没有则创建）"></a>步骤一：打开github官网，选择一个要新增分支的git仓库（若没有则创建）</h4><p><img src="/img/resources/github/1.png" alt="image.png"></p><h4 id="步骤二：在Code页面左侧Branch点击，出现下拉框"><a href="#步骤二：在Code页面左侧Branch点击，出现下拉框" class="headerlink" title="步骤二：在Code页面左侧Branch点击，出现下拉框"></a>步骤二：在Code页面左侧Branch点击，出现下拉框</h4><p><img src="/img/resources/github/2.png" alt="image.png"></p><h4 id="步骤三：在弹出的面板内，直接搜索要创建的新分支名称，会发现没有该分支时，会提示是否创建。点击Create-branch：dev"><a href="#步骤三：在弹出的面板内，直接搜索要创建的新分支名称，会发现没有该分支时，会提示是否创建。点击Create-branch：dev" class="headerlink" title="步骤三：在弹出的面板内，直接搜索要创建的新分支名称，会发现没有该分支时，会提示是否创建。点击Create branch：dev"></a>步骤三：在弹出的面板内，直接搜索要创建的新分支名称，会发现没有该分支时，会提示是否创建。点击Create branch：dev</h4><p><img src="/img/resources/github/3.png" alt="image.png"></p><h4 id="最后：新分支创建完成"><a href="#最后：新分支创建完成" class="headerlink" title="最后：新分支创建完成"></a>最后：新分支创建完成</h4><p><img src="/img/resources/github/4.png" alt="image.png"></p><p>以上就是直接在github上快速创建分支教程，希望读者喜欢！！！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;现阶段网上大部分搜索出来的如何在github上直接创建分支的方式，都是讲直接在项目或者git上创建分支后再push上去即可创建。这虽然也是一种方式之一，但是有时候我们希望能够像国内一样直接在仓库上进行创建。本篇文章将告诉你！！！&lt;/p&gt;
&lt;h4 id=&quot;步骤一：打开gith
      
    
    </summary>
    
      <category term="后端" scheme="https://blog.ffspace.cn/categories/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="Github" scheme="https://blog.ffspace.cn/categories/%E5%90%8E%E7%AB%AF/Github/"/>
    
    
      <category term="后端" scheme="https://blog.ffspace.cn/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>安装mysql8.0出现error 1042，无法正常启动解决方案</title>
    <link href="https://blog.ffspace.cn/2019/05/30/mysql/%E5%AE%89%E8%A3%85mysql8.0%E5%87%BA%E7%8E%B0error_1042,%E6%97%A0%E6%B3%95%E6%AD%A3%E5%B8%B8%E5%90%AF%E5%8A%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>https://blog.ffspace.cn/2019/05/30/mysql/安装mysql8.0出现error_1042,无法正常启动解决方案/</id>
    <published>2019-05-30T12:40:00.000Z</published>
    <updated>2020-11-02T02:24:16.708Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h2><p>mysql已经发展到了8.0阶段，但是很多人在下载了安装了mysql8.0后，在快接近完成的阶段下出现了异常：</p><blockquote><p>error 1042：Unable to connect to any of the specified MySQL hosts</p></blockquote><p>上述异常直接导致mysql无法正常Finish，如图所示：</p><p><img src="/img/resources/mysql/1.png" alt="image.png"></p><p><img src="/img/resources/mysql/2.png" alt="image.png"></p><h2 id="二、解决方案"><a href="#二、解决方案" class="headerlink" title="二、解决方案"></a>二、解决方案</h2><h4 id="1、windows端使用Win-R-–-gt-运行-“services-msc”-–-gt-打开service服务管理器，找到刚才安装mysql的服务名称"><a href="#1、windows端使用Win-R-–-gt-运行-“services-msc”-–-gt-打开service服务管理器，找到刚才安装mysql的服务名称" class="headerlink" title="1、windows端使用Win+R –&gt; 运行 “services.msc” –&gt; 打开service服务管理器，找到刚才安装mysql的服务名称"></a>1、windows端使用Win+R –&gt; 运行 “services.msc” –&gt; 打开service服务管理器，找到刚才安装mysql的服务名称</h4><p><img src="/img/resources/mysql/3.png" alt="image.png"></p><h4 id="2、右键-–-gt-属性-–-gt-登录，更改成“本地系统账户”-–-gt-确定"><a href="#2、右键-–-gt-属性-–-gt-登录，更改成“本地系统账户”-–-gt-确定" class="headerlink" title="2、右键 –&gt; 属性 –&gt; 登录，更改成“本地系统账户” –&gt; 确定"></a>2、右键 –&gt; 属性 –&gt; 登录，更改成“本地系统账户” –&gt; 确定</h4><p><img src="/img/resources/mysql/4.png" alt="image.png"></p><h4 id="3、回到安装程序，在次点击Execute，会发现已经可以成功到Finish界面"><a href="#3、回到安装程序，在次点击Execute，会发现已经可以成功到Finish界面" class="headerlink" title="3、回到安装程序，在次点击Execute，会发现已经可以成功到Finish界面"></a>3、回到安装程序，在次点击Execute，会发现已经可以成功到Finish界面</h4><p><img src="/img/resources/mysql/5.png" alt="image.png"></p><blockquote><p><strong>推荐阅读：</strong><br><a href="https://blog.ffspace.cn/categories/%E5%90%8E%E7%AB%AF/Spring-Security/">Spring Security系列教程</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、问题描述&quot;&gt;&lt;a href=&quot;#一、问题描述&quot; class=&quot;headerlink&quot; title=&quot;一、问题描述&quot;&gt;&lt;/a&gt;一、问题描述&lt;/h2&gt;&lt;p&gt;mysql已经发展到了8.0阶段，但是很多人在下载了安装了mysql8.0后，在快接近完成的阶段下出现了异常
      
    
    </summary>
    
      <category term="数据库" scheme="https://blog.ffspace.cn/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="MySQL" scheme="https://blog.ffspace.cn/tags/MySQL/"/>
    
      <category term="数据库" scheme="https://blog.ffspace.cn/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Jmeter测试脚本编写</title>
    <link href="https://blog.ffspace.cn/2019/05/30/%E6%B5%8B%E8%AF%95/Jmeter%E6%B5%8B%E8%AF%95%E8%84%9A%E6%9C%AC%E7%BC%96%E5%86%99/"/>
    <id>https://blog.ffspace.cn/2019/05/30/测试/Jmeter测试脚本编写/</id>
    <published>2019-05-30T12:40:00.000Z</published>
    <updated>2020-11-02T02:24:16.709Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p> Apache JMeter是Apache组织开发的基于Java的压力测试工具。用于对软件做压力测试，它最初被设计用于Web应用测试，但后来扩展到其他测试领域。 它可以用于测试静态和动态资源，例如静态文件、Java 小服务程序、CGI 脚本、Java 对象、数据库、FTP 服务器， 等等。</p><p><img src="/img/resources/jmeter/jmeter.jpg" alt="jmeter"></p><p>那么jmeter脚本怎么编写？</p><p>jmeter其实不需要自己添加脚本，配置一些东西就可以测试了！！！</p><h2 id="二、详细步骤"><a href="#二、详细步骤" class="headerlink" title="二、详细步骤"></a>二、详细步骤</h2><h4 id="1、先去apache官网下载jmeter，然后打开进入bin目录，点击jmeter-bat"><a href="#1、先去apache官网下载jmeter，然后打开进入bin目录，点击jmeter-bat" class="headerlink" title="1、先去apache官网下载jmeter，然后打开进入bin目录，点击jmeter.bat"></a>1、先去apache官网下载jmeter，然后打开进入bin目录，点击jmeter.bat</h4><p><img src="/img/resources/jmeter/1.png" alt="jmeter"></p><h4 id="2、点击之后会看到一个黑色的窗口（这个窗口不能关），还有一个jmeter工作窗口"><a href="#2、点击之后会看到一个黑色的窗口（这个窗口不能关），还有一个jmeter工作窗口" class="headerlink" title="2、点击之后会看到一个黑色的窗口（这个窗口不能关），还有一个jmeter工作窗口"></a>2、点击之后会看到一个黑色的窗口（这个窗口不能关），还有一个jmeter工作窗口</h4><p><img src="/img/resources/jmeter/2.png" alt="jmeter"><br><img src="/img/resources/jmeter/3.png" alt="jmeter"></p><h4 id="3、右键测试计划，新建线程组"><a href="#3、右键测试计划，新建线程组" class="headerlink" title="3、右键测试计划，新建线程组"></a>3、右键测试计划，新建线程组</h4><p><img src="/img/resources/jmeter/4.png" alt="jmeter"></p><h4 id="4、右键线程组，新建一个http请求"><a href="#4、右键线程组，新建一个http请求" class="headerlink" title="4、右键线程组，新建一个http请求"></a>4、右键线程组，新建一个http请求</h4><p><img src="/img/resources/jmeter/5.png" alt="jmeter"></p><h4 id="5、建好http请求之后，要把必要的参数填写上去（我的服务器都是自己的，根据你自己的填）"><a href="#5、建好http请求之后，要把必要的参数填写上去（我的服务器都是自己的，根据你自己的填）" class="headerlink" title="5、建好http请求之后，要把必要的参数填写上去（我的服务器都是自己的，根据你自己的填）"></a>5、建好http请求之后，要把必要的参数填写上去（我的服务器都是自己的，根据你自己的填）</h4><p><img src="/img/resources/jmeter/6.png" alt="jmeter"></p><h4 id="6、执行接口调用"><a href="#6、执行接口调用" class="headerlink" title="6、执行接口调用"></a>6、执行接口调用</h4><p><img src="/img/resources/jmeter/7.png" alt="jmeter"></p><h4 id="7、执行完了怎么看结果呢？要先右键线程组，添加一个查看结果树"><a href="#7、执行完了怎么看结果呢？要先右键线程组，添加一个查看结果树" class="headerlink" title="7、执行完了怎么看结果呢？要先右键线程组，添加一个查看结果树"></a>7、执行完了怎么看结果呢？要先右键线程组，添加一个查看结果树</h4><p><img src="/img/resources/jmeter/8.png" alt="jmeter"></p><h4 id="8、点击结果树就可以看到结果了"><a href="#8、点击结果树就可以看到结果了" class="headerlink" title="8、点击结果树就可以看到结果了"></a>8、点击结果树就可以看到结果了</h4><p><img src="/img/resources/jmeter/9.png" alt="jmeter"></p><blockquote><p><strong>推荐阅读：</strong><br><a href="https://blog.ffspace.cn/categories/%E5%90%8E%E7%AB%AF/Spring-Security/">Spring Security系列教程</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、简介&quot;&gt;&lt;a href=&quot;#一、简介&quot; class=&quot;headerlink&quot; title=&quot;一、简介&quot;&gt;&lt;/a&gt;一、简介&lt;/h2&gt;&lt;p&gt; Apache JMeter是Apache组织开发的基于Java的压力测试工具。用于对软件做压力测试，它最初被设计用于Web
      
    
    </summary>
    
      <category term="测试" scheme="https://blog.ffspace.cn/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="测试" scheme="https://blog.ffspace.cn/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Spring Security常见问题解决方案</title>
    <link href="https://blog.ffspace.cn/2019/05/23/Spring%20Security%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>https://blog.ffspace.cn/2019/05/23/Spring Security常见问题解决方案/</id>
    <published>2019-05-23T14:00:00.000Z</published>
    <updated>2020-11-02T02:24:16.704Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、Spring-Security-登录验证时候，表单name必须为username全小写。如果不一致会导致UserDetailsService的loadUserByUsername参数为空。"><a href="#1、Spring-Security-登录验证时候，表单name必须为username全小写。如果不一致会导致UserDetailsService的loadUserByUsername参数为空。" class="headerlink" title="1、Spring Security 登录验证时候，表单name必须为username全小写。如果不一致会导致UserDetailsService的loadUserByUsername参数为空。"></a>1、Spring Security 登录验证时候，表单name必须为username全小写。如果不一致会导致UserDetailsService的loadUserByUsername参数为空。</h3><h3 id="2、不管是用户名不存在、密码错误等抛出的异常都是org-springframework-security-authentication-BadCredentialsException-Bad-credentials。"><a href="#2、不管是用户名不存在、密码错误等抛出的异常都是org-springframework-security-authentication-BadCredentialsException-Bad-credentials。" class="headerlink" title="2、不管是用户名不存在、密码错误等抛出的异常都是org.springframework.security.authentication.BadCredentialsException: Bad credentials。"></a>2、不管是用户名不存在、密码错误等抛出的异常都是org.springframework.security.authentication.BadCredentialsException: Bad credentials。</h3><h4 id="方案一：（来自网络）"><a href="#方案一：（来自网络）" class="headerlink" title="方案一：（来自网络）"></a>方案一：（来自网络）</h4><p>1.既然系统是捕获UsernameNotFoundException类型的异常后再抛出新的BadCredentialsException异常，那么我们干脆就不抛出UsernameNotFoundException异常。</p><p>我们模仿UsernameNotFoundException，创建自己的MyUsernameNotFoundException异常类。</p><p>2.在MyUserDetailsService类的loadUserByUsername方法抛出我们自己定义的MyUsernameNotFoundException异常。</p><h4 id="方案二："><a href="#方案二：" class="headerlink" title="方案二："></a>方案二：</h4><p>在MyUserDetailsService类的loadUserByUsername方法直接抛出BadCredentialsException异常，这样就不需要创建自己的MyUsernameNotFoundException异常类。</p><p>好了，这样在页面通过[[${session.SPRING_SECURITY_LAST_EXCEPTION.message}]]，就能显示我们自定义的异常信息了。</p><h3 id="3、跳转到-user页面时候出现org-springframework-security-access-AccessDeniedException-Access-is-denied"><a href="#3、跳转到-user页面时候出现org-springframework-security-access-AccessDeniedException-Access-is-denied" class="headerlink" title="3、跳转到/user页面时候出现org.springframework.security.access.AccessDeniedException: Access is denied"></a>3、跳转到/user页面时候出现org.springframework.security.access.AccessDeniedException: Access is denied</h3><p>WebSecurityConfig代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line"></span><br><span class="line">protected void configure(HttpSecurity http) throws Exception&#123;</span><br><span class="line"></span><br><span class="line">    http.authorizeRequests()</span><br><span class="line"></span><br><span class="line">            .antMatchers(&quot;/&quot;,&quot;/index&quot;).permitAll() // permitAll被允许访问</span><br><span class="line"></span><br><span class="line">            .antMatchers(&quot;/user/**&quot;).hasRole(&quot;USER&quot;)// 指定所有user页面需要USER角色才能访问</span><br><span class="line"></span><br><span class="line">        .and()</span><br><span class="line"></span><br><span class="line">            .formLogin().loginPage(&quot;/login&quot;).defaultSuccessUrl(&quot;/user&quot;)</span><br><span class="line"></span><br><span class="line">        .and()</span><br><span class="line"></span><br><span class="line">            .logout().logoutUrl(&quot;/logout&quot;).logoutSuccessUrl(&quot;/login&quot;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决方案：代码中我们设置了仅能USER访问。但是通过debug调试发现。在Security底层时候会自动加上ROLE_USER来进行角色校验。因此在数据库的字段必须加上ROLE_前缀</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1、Spring-Security-登录验证时候，表单name必须为username全小写。如果不一致会导致UserDetailsService的loadUserByUsername参数为空。&quot;&gt;&lt;a href=&quot;#1、Spring-Security-登录验证时候
      
    
    </summary>
    
      <category term="后端" scheme="https://blog.ffspace.cn/categories/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="Spring Security" scheme="https://blog.ffspace.cn/categories/%E5%90%8E%E7%AB%AF/Spring-Security/"/>
    
    
      <category term="Spring" scheme="https://blog.ffspace.cn/tags/Spring/"/>
    
      <category term="Spring Security" scheme="https://blog.ffspace.cn/tags/Spring-Security/"/>
    
  </entry>
  
  <entry>
    <title>Spring Security教程(五)--- 实现QQ授权登录</title>
    <link href="https://blog.ffspace.cn/2019/05/22/Spring-Security-%E6%95%99%E7%A8%8B%EF%BC%88%E4%BA%94%EF%BC%89---%E5%AE%9E%E7%8E%B0QQ%E6%8E%88%E6%9D%83%E7%99%BB%E5%BD%95/"/>
    <id>https://blog.ffspace.cn/2019/05/22/Spring-Security-教程（五）---实现QQ授权登录/</id>
    <published>2019-05-22T14:40:00.000Z</published>
    <updated>2020-11-02T02:24:16.706Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、准备"><a href="#一、准备" class="headerlink" title="一、准备"></a>一、准备</h1><p>1.1 先在<a href="https://connect.qq.com/index.html" target="_blank" rel="noopener">QQ互联</a>申请成为开发者，并创建应用申请APPId 和AppKey。<br>1.2 查看<a href="http://wiki.connect.qq.com/网站应用接入流程" target="_blank" rel="noopener">官方接入流程文档</a>。</p><p>以下是自己申请后的密钥，贡献出来方便各位测试</p><blockquote><p>APP ID：101364240<br>APP Key：ef27b7a6ca651a3609dd47f21e385955<br>回调地址：<a href="http://127.0.0.1/login/qq" target="_blank" rel="noopener">http://127.0.0.1/login/qq</a></p></blockquote><p>项目代码：<a href="https://github.com/Bootcap/spring-security-study-session" target="_blank" rel="noopener">https://github.com/Bootcap/spring-security-study-session</a></p><h1 id="二、开发步骤"><a href="#二、开发步骤" class="headerlink" title="二、开发步骤"></a>二、开发步骤</h1><h5 id="前提，在上篇Spring-Security-四-权限动态修改-的"><a href="#前提，在上篇Spring-Security-四-权限动态修改-的" class="headerlink" title="前提，在上篇Spring Security (四) - 权限动态修改 的"></a>前提，在上篇<a href="https://www.jianshu.com/p/d540fcbe3a81" target="_blank" rel="noopener">Spring Security (四) - 权限动态修改</a> 的</h5><p> pom.xml 基础上加入(或直接查看源码)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.glassfish.jersey.media&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;jersey-media-json-jackson&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><h5 id="2-1-首先自定义QQAuthenticationFilter过滤器继承AbstractAuthenticationProcessingFilter类"><a href="#2-1-首先自定义QQAuthenticationFilter过滤器继承AbstractAuthenticationProcessingFilter类" class="headerlink" title="2.1 首先自定义QQAuthenticationFilter过滤器继承AbstractAuthenticationProcessingFilter类"></a>2.1 首先自定义QQAuthenticationFilter过滤器继承AbstractAuthenticationProcessingFilter类</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line">package com.bootcap.session.security.filter;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * QQ认证过滤器</span><br><span class="line"> * 2018-12-18 10:57</span><br><span class="line"> */</span><br><span class="line">public class QQAuthenticationFilter extends AbstractAuthenticationProcessingFilter &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * response_type 返回类型</span><br><span class="line">     */</span><br><span class="line">    private final static String RESPONSE_TYPE = &quot;code&quot;;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * grant_type 由腾讯提供</span><br><span class="line">     */</span><br><span class="line">    private final static String GRANT_TYPE = &quot;authorization_code&quot;;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * client_id 由腾讯提供(即AppId)</span><br><span class="line">     */</span><br><span class="line">    static final String CLIENT_ID = &quot;101364240&quot;;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * client_secret 由腾讯提供(即App Key)</span><br><span class="line">     */</span><br><span class="line">    private final static String CLIENT_SECRET = &quot;ef27b7a6ca651a3609dd47f21e385955&quot;;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * redirect_uri 腾讯回调地址</span><br><span class="line">     */</span><br><span class="line">    private final static String REDIRECT_URI = &quot;http://127.0.0.1/login/qq&quot;;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取 access_token_url 的 API</span><br><span class="line">     */</span><br><span class="line">    private final static String ACCESS_TOKEN_URL = &quot;https://graph.qq.com/oauth2.0/token&quot;;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取 OpenID url地址</span><br><span class="line">     */</span><br><span class="line">    private final static String OPENID_URL = &quot;https://graph.qq.com/oauth2.0/me?access_token=%s&quot;;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取 token 的地址拼接</span><br><span class="line">     */</span><br><span class="line">    private final static String TOKEN_ACCESS_API = &quot;%s?grant_type=%s&amp;client_id=%s&amp;client_secret=%s&amp;code=%s&amp;redirect_uri=%s&quot;;</span><br><span class="line"></span><br><span class="line">    public QQAuthenticationFilter(String defaultFilterProcessesUrl)&#123;</span><br><span class="line">        super(new AntPathRequestMatcher(defaultFilterProcessesUrl, &quot;GET&quot;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Authentication attemptAuthentication(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws AuthenticationException, IOException, ServletException &#123;</span><br><span class="line">        UsernamePasswordAuthenticationToken authenticationToken =  null;</span><br><span class="line">        String code = httpServletRequest.getParameter(RESPONSE_TYPE);</span><br><span class="line">//        System.out.println(&quot;输出response_type:&quot; + code);</span><br><span class="line">        String accessTokenURL = String.format(TOKEN_ACCESS_API,ACCESS_TOKEN_URL,GRANT_TYPE,CLIENT_ID,CLIENT_SECRET,code,REDIRECT_URI);</span><br><span class="line">//        System.out.println(&quot;accessTokenURL:&quot; +accessTokenURL);</span><br><span class="line">        QQAccessToken qqAccessToken = getQQAccessToken(accessTokenURL);</span><br><span class="line">        if (null != qqAccessToken)&#123;</span><br><span class="line">            String openId = getOpenId(qqAccessToken.getAccessToken());</span><br><span class="line">//            System.out.println(&quot;输出openId:&quot; + openId);</span><br><span class="line">            if (null != openId)&#123;</span><br><span class="line">                authenticationToken = new UsernamePasswordAuthenticationToken(qqAccessToken.getAccessToken(),openId);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        // 返回验证结果</span><br><span class="line">        return this.getAuthenticationManager().authenticate(authenticationToken);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 开始请求获取QQToken</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    private QQAccessToken getQQAccessToken(String accessTokenURL)&#123;</span><br><span class="line">        Assert.notNull(accessTokenURL,&quot;accessTokenURL不能为空&quot;);</span><br><span class="line">        RestTemplate template = new RestTemplate();</span><br><span class="line">        QQAccessToken qqAccessToken = new QQAccessToken();</span><br><span class="line">        String[] results = template.getForObject(accessTokenURL, String.class).split(&quot;&amp;&quot;);</span><br><span class="line">        if (results.length == 3)&#123;</span><br><span class="line">            String accessToken = results[0].replace(&quot;access_token=&quot;, &quot;&quot;);</span><br><span class="line">            Integer expiresIn = Integer.valueOf(results[1].replace(&quot;expires_in=&quot;, &quot;&quot;));</span><br><span class="line">            String refreshToken = results[2].replace(&quot;refresh_token=&quot;, &quot;&quot;);</span><br><span class="line">            qqAccessToken.setAccessToken(accessToken);</span><br><span class="line">            qqAccessToken.setExpiresIn(expiresIn);</span><br><span class="line">            qqAccessToken.setRefreshToken(refreshToken);</span><br><span class="line">        &#125;</span><br><span class="line">        return qqAccessToken;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取用户的唯一OpenId</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    private String getOpenId(String accessToken)&#123;</span><br><span class="line">        RestTemplate template = new RestTemplate();</span><br><span class="line">        String openIdResult = template.getForObject(String.format(OPENID_URL,accessToken), String.class);</span><br><span class="line">        Pattern pattern = Pattern.compile(&quot;\&quot;openid\&quot;:\&quot;(.*)\&quot;&quot;);</span><br><span class="line">        Matcher matcher = pattern.matcher(openIdResult);</span><br><span class="line">        while (matcher.find())&#123;</span><br><span class="line">            return matcher.group(1);</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么要继承AbstractAuthenticationProcessingFilter类，请前往<a href="https://www.jianshu.com/p/88a64cc025ac" target="_blank" rel="noopener">Spring Security（二） - 基于数据库实现校验</a><br>的流程图。</p><h5 id="2-2-创建QQAuthenticationManager通过accessToken和openId获取基本信息，并生成新的Authentication认证对象"><a href="#2-2-创建QQAuthenticationManager通过accessToken和openId获取基本信息，并生成新的Authentication认证对象" class="headerlink" title="2.2 创建QQAuthenticationManager通过accessToken和openId获取基本信息，并生成新的Authentication认证对象"></a>2.2 创建QQAuthenticationManager通过accessToken和openId获取基本信息，并生成新的Authentication认证对象</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">package com.bootcap.session.security.manager;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 管理授权类</span><br><span class="line"> * 2018-12-18 14:47</span><br><span class="line"> */</span><br><span class="line">public class QQAuthenticatioManager implements AuthenticationManager &#123;</span><br><span class="line"></span><br><span class="line">    private static final List&lt;GrantedAuthority&gt; AUTHORITIES = new ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    public QQAuthenticatioManager()&#123;&#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取用户信息</span><br><span class="line">     */</span><br><span class="line">    private final static String USER_INFO_URL = &quot;https://graph.qq.com/user/get_user_info?access_token=%s&amp;oauth_consumer_key=%s&amp;openid=%s&quot;;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * client_id 由腾讯提供(即AppId)</span><br><span class="line">     */</span><br><span class="line">    static final String CLIENT_ID = &quot;101364240&quot;;</span><br><span class="line"></span><br><span class="line">    static &#123;</span><br><span class="line">        AUTHORITIES.add(new SimpleGrantedAuthority(&quot;ROLE_USER&quot;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Authentication authenticate(Authentication authentication) throws AuthenticationException &#123;</span><br><span class="line">        QQUserInfo qqUserInfo = null;</span><br><span class="line">        if (authentication.getName() != null &amp;&amp; authentication.getCredentials() != null)&#123;</span><br><span class="line">            qqUserInfo = getUserInfo(authentication.getName(), (String) authentication.getCredentials());</span><br><span class="line">        &#125;</span><br><span class="line">//        System.out.println(&quot;输出用户信息：&quot; +qqUserInfo.toString());</span><br><span class="line">        return new UsernamePasswordAuthenticationToken(qqUserInfo,null,AUTHORITIES);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取QQ授权后的基本信息</span><br><span class="line">     * @param accessToken</span><br><span class="line">     * @param openId</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    private QQUserInfo getUserInfo(String accessToken, String openId) &#123;</span><br><span class="line">        String url = String.format(USER_INFO_URL,accessToken,CLIENT_ID,openId);</span><br><span class="line">        RestTemplate template = new RestTemplate();</span><br><span class="line">        String userInfoResult = template.getForObject(url, String.class);</span><br><span class="line">        QQUserInfo qqUserInfo = jsonToObject(userInfoResult, QQUserInfo.class);</span><br><span class="line">        return qqUserInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private &lt;T&gt; T jsonToObject(String json,Class&lt;T&gt; targetClass)&#123;</span><br><span class="line">        ObjectMapper objectMapper = new ObjectMapper();</span><br><span class="line">        objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);</span><br><span class="line">        try &#123;</span><br><span class="line">            return objectMapper.readValue(json,targetClass);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么要实现AuthenticationManager类?因为在AbstractAuthenticationProcessingFilter.doFilter()方法中调用了this.attemptAuthentication(request, response) 中实现的方法（即2.1中我们自定义的Filter类的实现方法）。因此在我们自定义类中中调用了 this.getAuthenticationManager().authenticate(authRequest)，所以需要实现该类。</p><h5 id="2-3-在WebSecurityConfig类中添加自定义过滤器"><a href="#2-3-在WebSecurityConfig类中添加自定义过滤器" class="headerlink" title="2.3 在WebSecurityConfig类中添加自定义过滤器"></a>2.3 在WebSecurityConfig类中添加自定义过滤器</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">package com.bootcap.session.security.configuration;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * WebSecurityConfig 配置文件</span><br><span class="line"> * 2018-12-10 11:03</span><br><span class="line"> */</span><br><span class="line">@Configuration</span><br><span class="line">@EnableWebSecurity</span><br><span class="line">public class WebSecurityConfig extends WebSecurityConfigurerAdapter &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void configure(HttpSecurity http) throws Exception &#123;</span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .antMatchers(&quot;/&quot;).permitAll()</span><br><span class="line">                .antMatchers(&quot;/user/**&quot;).hasRole(&quot;USER&quot;)</span><br><span class="line">                .and()</span><br><span class="line">                .formLogin().loginPage(&quot;/login&quot;).defaultSuccessUrl(&quot;/user&quot;)</span><br><span class="line">                .and()</span><br><span class="line">                .logout().logoutUrl(&quot;/logout&quot;).logoutSuccessUrl(&quot;/login&quot;);</span><br><span class="line">        // 在 UsernamePasswordAuthenticationFilter 前添加 QQAuthenticationFilter</span><br><span class="line">        http.addFilterAt(qqAuthenticationFilter(), UsernamePasswordAuthenticationFilter.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void configure(AuthenticationManagerBuilder auth) throws Exception &#123;</span><br><span class="line">                auth.inMemoryAuthentication() // 在内存中进行身份验证</span><br><span class="line">                .passwordEncoder(new BCryptPasswordEncoder())</span><br><span class="line">                .withUser(&quot;user&quot;)</span><br><span class="line">                .password(new BCryptPasswordEncoder().encode(&quot;123456&quot;))</span><br><span class="line">                .roles(&quot;USER&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 自定义 QQ登录 过滤器</span><br><span class="line">     */</span><br><span class="line">    private QQAuthenticationFilter qqAuthenticationFilter()&#123;</span><br><span class="line">        QQAuthenticationFilter authenticationFilter = new QQAuthenticationFilter(&quot;/login/qq&quot;);</span><br><span class="line">        SimpleUrlAuthenticationSuccessHandler simpleUrlAuthenticationSuccessHandler = new SimpleUrlAuthenticationSuccessHandler();</span><br><span class="line">        simpleUrlAuthenticationSuccessHandler.setAlwaysUseDefaultTargetUrl(true);</span><br><span class="line">        simpleUrlAuthenticationSuccessHandler.setDefaultTargetUrl(&quot;/user&quot;);</span><br><span class="line">        authenticationFilter.setAuthenticationSuccessHandler(simpleUrlAuthenticationSuccessHandler);</span><br><span class="line">        authenticationFilter.setAuthenticationManager(new QQAuthenticatioManager());</span><br><span class="line">        return authenticationFilter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-4-修改Controller和页面"><a href="#2-4-修改Controller和页面" class="headerlink" title="2.4 修改Controller和页面"></a>2.4 修改Controller和页面</h5><p>2.4.1 Controller配置详见【<a href="https://github.com/Bootcap/spring-security-study-session" target="_blank" rel="noopener">项目代码spring-security-05</a>】<br>2.4.2 login.html页面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot; xmlns=&quot;http://www.w3.org/1999/xhtml&quot; xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;登录页面&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;登录页面&lt;/h1&gt;</span><br><span class="line">&lt;div th:if=&quot;$&#123;param.error&#125;&quot;&gt;</span><br><span class="line">    用户名或密码不正确</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div th:if=&quot;$&#123;param.logout&#125;&quot;&gt;</span><br><span class="line">    你已经退出登录</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;form th:action=&quot;@&#123;/login&#125;&quot; method=&quot;post&quot;&gt;</span><br><span class="line">    &lt;div&gt;&lt;label&gt; 用户名: &lt;input type=&quot;text&quot; name=&quot;username&quot;/&gt; &lt;/label&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;&lt;label&gt; 密&amp;nbsp;&amp;nbsp;&amp;nbsp;码: &lt;input type=&quot;password&quot; name=&quot;password&quot;/&gt; &lt;/label&gt;&lt;/div&gt;</span><br><span class="line">    &lt;br/&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;input type=&quot;submit&quot; value=&quot;登录&quot;/&gt;</span><br><span class="line">        &lt;br/&gt;</span><br><span class="line">        &lt;a  href=&quot;https://graph.qq.com/oauth2.0/authorize?response_type=code&amp;client_id=101364240&amp;redirect_uri=http://127.0.0.1/login/qq&amp;state=test&quot;&gt;&lt;img style=&quot;padding-top: 5px&quot; src=&quot;/static/imgs/qqLogin.png&quot; /&gt;&lt;/a&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>2.4.3 user.html页面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;html xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</span><br><span class="line">    &lt;title&gt;用户界面&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=&quot;container&quot; style=&quot;margin-top: 60px&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div style=&quot;text-align: center; margin-top: 10%&quot;&gt;</span><br><span class="line">        &lt;img th:src=&quot;$&#123;avatar&#125;&quot; th:alt=&quot;$&#123;avatar&#125;&quot; /&gt;</span><br><span class="line">        &lt;p th:text=&quot;$&#123;username&#125;&quot; style=&quot;margin-top: 25px; font-size: 20px; color: crimson&quot;&gt;&lt;/p&gt;</span><br><span class="line">        &lt;form th:action=&quot;@&#123;/logout&#125;&quot; method=&quot;post&quot;&gt;</span><br><span class="line">            &lt;button style=&quot;margin-top: 20px&quot;&gt;退出登录&lt;/button&gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><h5 id="2-5-补充示例中需要用到的实体类"><a href="#2-5-补充示例中需要用到的实体类" class="headerlink" title="2.5 补充示例中需要用到的实体类"></a>2.5 补充示例中需要用到的实体类</h5><p>2.5.1 QQAccessToken.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">package com.bootcap.session.security.entity;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 2018-12-18 11:47</span><br><span class="line"> */</span><br><span class="line">public class QQAccessToken &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 授权accessToken</span><br><span class="line">     */</span><br><span class="line">    private String accessToken;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 该access token的有效期，单位为秒。</span><br><span class="line">     */</span><br><span class="line">    private Integer expiresIn;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 在授权自动续期步骤中，获取新的Access_Token时需要提供的参数。</span><br><span class="line">     */</span><br><span class="line">    private String refreshToken;</span><br><span class="line"></span><br><span class="line">    public String getAccessToken() &#123;</span><br><span class="line">        return accessToken;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAccessToken(String accessToken) &#123;</span><br><span class="line">        this.accessToken = accessToken;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getExpiresIn() &#123;</span><br><span class="line">        return expiresIn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setExpiresIn(Integer expiresIn) &#123;</span><br><span class="line">        this.expiresIn = expiresIn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getRefreshToken() &#123;</span><br><span class="line">        return refreshToken;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setRefreshToken(String refreshToken) &#123;</span><br><span class="line">        this.refreshToken = refreshToken;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;QQAccessToken&#123;&quot; +</span><br><span class="line">                &quot;accessToken=&apos;&quot; + accessToken + &apos;\&apos;&apos; +</span><br><span class="line">                &quot;, expiresIn=&quot; + expiresIn +</span><br><span class="line">                &quot;, refreshToken=&apos;&quot; + refreshToken + &apos;\&apos;&apos; +</span><br><span class="line">                &apos;&#125;&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2.5.2 QQUserInfo.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">package com.bootcap.session.security.entity;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * qq信息实体</span><br><span class="line"> * 2018-12-18 15:34</span><br><span class="line"> */</span><br><span class="line">public class QQUserInfo &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 昵称</span><br><span class="line">     */</span><br><span class="line">    private String nickname;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 性别</span><br><span class="line">     */</span><br><span class="line">    private String gender;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * QQ头像</span><br><span class="line">     */</span><br><span class="line">    private String figureurl_qq_1;</span><br><span class="line"></span><br><span class="line">    public String getNickname() &#123;</span><br><span class="line">        return nickname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setNickname(String nickname) &#123;</span><br><span class="line">        this.nickname = nickname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getGender() &#123;</span><br><span class="line">        return gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setGender(String gender) &#123;</span><br><span class="line">        this.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getFigureurl_qq_1() &#123;</span><br><span class="line">        return figureurl_qq_1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setFigureurl_qq_1(String figureurl_qq_1) &#123;</span><br><span class="line">        this.figureurl_qq_1 = figureurl_qq_1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;QQUserInfo&#123;&quot; +</span><br><span class="line">                &quot;nickname=&apos;&quot; + nickname + &apos;\&apos;&apos; +</span><br><span class="line">                &quot;, gender=&apos;&quot; + gender + &apos;\&apos;&apos; +</span><br><span class="line">                &quot;, figureurl_qq_1=&apos;&quot; + figureurl_qq_1 + &apos;\&apos;&apos; +</span><br><span class="line">                &apos;&#125;&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="三、测试"><a href="#三、测试" class="headerlink" title="三、测试"></a>三、测试</h1><p>3.1 启动项目并且浏览器访问:127.0.0.1/user，会自动跳转到登录页面<br><img src="https://upload-images.jianshu.io/upload_images/5134062-95b920f05ba78bd4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>【注意】：我们发现我们使用的静态资源qq登录的图片，不会显示,同时浏览器控制台报404，说图片未找到。<br>【解决方法】：在configuration包下新建一个WebMvcConfig.java类设置我们静态资源的路径<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">package com.bootcap.session.security.configuration;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">public class WebMvcConfig extends WebMvcConfigurationSupport &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void addResourceHandlers(ResourceHandlerRegistry registry) &#123;</span><br><span class="line">        registry.addResourceHandler(&quot;/static/**&quot;).addResourceLocations(&quot;classpath:/static/&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3.2 再次启动并访问页面，已经可以正常显示<br><img src="https://upload-images.jianshu.io/upload_images/5134062-07e4464b3feb9080.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>3.3 使用qq登录<br><img src="https://upload-images.jianshu.io/upload_images/5134062-c68772701df74d0b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、准备&quot;&gt;&lt;a href=&quot;#一、准备&quot; class=&quot;headerlink&quot; title=&quot;一、准备&quot;&gt;&lt;/a&gt;一、准备&lt;/h1&gt;&lt;p&gt;1.1 先在&lt;a href=&quot;https://connect.qq.com/index.html&quot; target=&quot;_bla
      
    
    </summary>
    
      <category term="后端" scheme="https://blog.ffspace.cn/categories/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="Spring Security" scheme="https://blog.ffspace.cn/categories/%E5%90%8E%E7%AB%AF/Spring-Security/"/>
    
    
      <category term="Spring" scheme="https://blog.ffspace.cn/tags/Spring/"/>
    
      <category term="Spring Security" scheme="https://blog.ffspace.cn/tags/Spring-Security/"/>
    
  </entry>
  
  <entry>
    <title>Spring Security教程(四)--- 权限动态修改</title>
    <link href="https://blog.ffspace.cn/2019/05/22/Spring-Security-%E6%95%99%E7%A8%8B%EF%BC%88%E5%9B%9B%EF%BC%89---%E6%9D%83%E9%99%90%E5%8A%A8%E6%80%81%E4%BF%AE%E6%94%B9/"/>
    <id>https://blog.ffspace.cn/2019/05/22/Spring-Security-教程（四）---权限动态修改/</id>
    <published>2019-05-22T14:30:00.000Z</published>
    <updated>2020-11-02T02:24:16.707Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本篇pom.xml与上篇文章 <a href="https://www.jianshu.com/p/3609e7517edb" target="_blank" rel="noopener">Spring Security 入门教程（三）- 基于登录认证记住我实例</a> 相同。</p><p>项目代码：<a href="https://github.com/Bootcap/spring-security-study-session" target="_blank" rel="noopener">https://github.com/Bootcap/spring-security-study-session</a></p><h1 id="一、新建VipController-java"><a href="#一、新建VipController-java" class="headerlink" title="一、新建VipController.java"></a>一、新建VipController.java</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">package com.bootcap.session.security.controller;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 动态权限修改Controller</span><br><span class="line"> * 2018-12-15 14:16</span><br><span class="line"> */</span><br><span class="line">@Controller</span><br><span class="line">@ResponseBody</span><br><span class="line">public class VipController &#123;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(value = &quot;/vip/index&quot;,method = RequestMethod.GET)</span><br><span class="line">    public String vipPage()&#123;</span><br><span class="line">        return &quot;只有VIP用户可观看&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(value = &quot;/getVIP&quot;,method = RequestMethod.GET)</span><br><span class="line">    public String getVip()&#123;</span><br><span class="line">        // 获取认证信息</span><br><span class="line">        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();</span><br><span class="line">        List&lt;GrantedAuthority&gt; update = new ArrayList&lt;&gt;(authentication.getAuthorities());</span><br><span class="line">        // 添加VIP授权</span><br><span class="line">        update.add(new SimpleGrantedAuthority(&quot;ROLE_VIP&quot;));</span><br><span class="line">        // 生成新的认证信息</span><br><span class="line">        Authentication newAuth = new UsernamePasswordAuthenticationToken(authentication.getPrincipal(), authentication.getCredentials(), update);</span><br><span class="line">        SecurityContextHolder.getContext().setAuthentication(newAuth);</span><br><span class="line">        return &quot;ok&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二、修改WebSecurityConfig.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">package com.bootcap.session.security.configuration;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 2018-12-10 11:03</span><br><span class="line"> */</span><br><span class="line">@Configuration</span><br><span class="line">@EnableWebSecurity</span><br><span class="line">public class WebSecurityConfig extends WebSecurityConfigurerAdapter &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void configure(HttpSecurity http) throws Exception &#123;</span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .antMatchers(&quot;/getVIP&quot;).permitAll()</span><br><span class="line">                .antMatchers(&quot;/vip/index&quot;).hasRole(&quot;VIP&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="三、启动测试"><a href="#三、启动测试" class="headerlink" title="三、启动测试"></a>三、启动测试</h1><p>3.1 假设当前你的权限只有 ROLE_USER的时候访问：localhost:8080/vip/index 时页面会提示403，同时控制台也会抛出“Access is denied 无权限”异常（提示：若没有异常可以在application.yml下修改：org.springframework.security: debug）。<br><img src="https://upload-images.jianshu.io/upload_images/5134062-e803dc50240831d0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>3.2 开启另外窗口，访问：localhost:8080/getVIP 地址，返回了”ok”，再刷新页面即可正常访问；<br><img src="https://upload-images.jianshu.io/upload_images/5134062-d290854de7eccfaf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;本篇pom.xml与上篇文章 &lt;a href=&quot;https://www.jianshu.com/p/3609e7517edb&quot; target
      
    
    </summary>
    
      <category term="后端" scheme="https://blog.ffspace.cn/categories/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="Spring Security" scheme="https://blog.ffspace.cn/categories/%E5%90%8E%E7%AB%AF/Spring-Security/"/>
    
    
      <category term="Spring" scheme="https://blog.ffspace.cn/tags/Spring/"/>
    
      <category term="Spring Security" scheme="https://blog.ffspace.cn/tags/Spring-Security/"/>
    
  </entry>
  
  <entry>
    <title>Spring Security教程(三) --- 基于登录认证记住我实例</title>
    <link href="https://blog.ffspace.cn/2019/05/22/Spring-Security-%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%89%EF%BC%89---%E5%9F%BA%E4%BA%8E%E7%99%BB%E5%BD%95%E8%AE%A4%E8%AF%81%E8%AE%B0%E4%BD%8F%E6%88%91%E5%AE%9E%E4%BE%8B/"/>
    <id>https://blog.ffspace.cn/2019/05/22/Spring-Security-教程（三）---基于登录认证记住我实例/</id>
    <published>2019-05-22T14:20:00.000Z</published>
    <updated>2020-11-02T02:24:16.705Z</updated>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>本篇文章基于<a href="https://www.jianshu.com/p/fa8c3dd4697d" target="_blank" rel="noopener">Spring Security 入门教程（一） - 简单的登录认证</a> 基础上修改的记住我教程。</p><p>项目代码：<a href="https://github.com/Bootcap/spring-security-study-session" target="_blank" rel="noopener">https://github.com/Bootcap/spring-security-study-session</a></p><h1 id="一、配置pom-xml文件"><a href="#一、配置pom-xml文件" class="headerlink" title="一、配置pom.xml文件"></a>一、配置pom.xml文件</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">  &lt;name&gt;spring-security-study-session&lt;/name&gt;</span><br><span class="line">  &lt;groupId&gt;com.bootcap.session.security&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;spring-security-study-session&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">  &lt;parent&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.0.1.RELEASE&lt;/version&gt;</span><br><span class="line">  &lt;/parent&gt;</span><br><span class="line"></span><br><span class="line">  &lt;properties&gt;</span><br><span class="line">    &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">    &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</span><br><span class="line">  &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &lt;dependencies&gt;</span><br><span class="line"> &lt;!-- Spring Boot--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- Test --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-security-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">  &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">  &lt;build&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">      &lt;plugin&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">      &lt;/plugin&gt;</span><br><span class="line">    &lt;/plugins&gt;</span><br><span class="line">  &lt;/build&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><p>二、修改TemplateConfig.java类<br>路径：src/java/com/bootcap/session/security/configuration/TemplateConfig.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class TemplateConfig implements WebMvcConfigurer &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void addViewControllers(ViewControllerRegistry registry) &#123;</span><br><span class="line">        registry.addViewController(&quot;/&quot;).setViewName(&quot;index&quot;);</span><br><span class="line">        registry.addViewController(&quot;/index&quot;).setViewName(&quot;index&quot;);</span><br><span class="line">        registry.addViewController(&quot;/login&quot;).setViewName(&quot;login&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>三、修改WebSecurityConfig.java<br>路径：src/java/com/bootcap/session/security/configuration/WebSecurityConfig.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">package com.bootcap.session.security.configuration;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 2018-12-10 11:03</span><br><span class="line"> */</span><br><span class="line">@Configuration</span><br><span class="line">@EnableWebSecurity</span><br><span class="line">public class WebSecurityConfig extends WebSecurityConfigurerAdapter &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void configure(WebSecurity web) throws Exception &#123;</span><br><span class="line">        web.ignoring()</span><br><span class="line">                .antMatchers(&quot;/js/**&quot;,&quot;/img/**&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 重点修改的方法 </span><br><span class="line">    @Override</span><br><span class="line">    protected void configure(HttpSecurity http) throws Exception &#123;</span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                    .formLogin()</span><br><span class="line">                        .loginPage(&quot;/login&quot;)</span><br><span class="line">                        .permitAll().defaultSuccessUrl(&quot;/&quot;)</span><br><span class="line">                .and()</span><br><span class="line">                    .logout()</span><br><span class="line">                        .invalidateHttpSession(true)</span><br><span class="line">                        .clearAuthentication(true)</span><br><span class="line">                        .logoutRequestMatcher(new AntPathRequestMatcher(&quot;/logout&quot;))</span><br><span class="line">                        .logoutSuccessUrl(&quot;/login?logout&quot;)</span><br><span class="line">                        .permitAll()</span><br><span class="line">                .and()</span><br><span class="line">                    .rememberMe()</span><br><span class="line">                        .key(&quot;unique-and-secret&quot;)</span><br><span class="line">                        .rememberMeCookieName(&quot;rememberMeCookieName&quot;) // 设置cookie名称</span><br><span class="line">                        .tokenValiditySeconds(24 * 60 * 60); // 设置令牌有效期，若不自定义：默认为2周</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void configure(AuthenticationManagerBuilder auth) throws Exception &#123;</span><br><span class="line">        auth.inMemoryAuthentication() // 在内存中进行身份验证</span><br><span class="line">                .passwordEncoder(new BCryptPasswordEncoder())</span><br><span class="line">                .withUser(&quot;user&quot;)</span><br><span class="line">                .password(new BCryptPasswordEncoder().encode(&quot;123456&quot;))</span><br><span class="line">                .roles(&quot;USER&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>四、修改页面文件<br>路径：src/resources/templates/</p><h5 id="4-1-修改login-html，在原基础上加上记住我复选框"><a href="#4-1-修改login-html，在原基础上加上记住我复选框" class="headerlink" title="4.1 修改login.html，在原基础上加上记住我复选框"></a>4.1 修改login.html，在原基础上加上记住我复选框</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot; xmlns=&quot;http://www.w3.org/1999/xhtml&quot; xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;登录页面&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;登录页面&lt;/h1&gt;</span><br><span class="line">&lt;div th:if=&quot;$&#123;param.error&#125;&quot;&gt;</span><br><span class="line">    用户名或密码不正确</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div th:if=&quot;$&#123;param.logout&#125;&quot;&gt;</span><br><span class="line">    你已经退出登录</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;form th:action=&quot;@&#123;/login&#125;&quot; method=&quot;post&quot;&gt;</span><br><span class="line">    &lt;div&gt;&lt;label&gt; 用户名: &lt;input type=&quot;text&quot; name=&quot;username&quot;/&gt; &lt;/label&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;&lt;label&gt; 密&amp;nbsp;&amp;nbsp;&amp;nbsp;码: &lt;input type=&quot;password&quot; name=&quot;password&quot;/&gt; &lt;/label&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;input id=&quot;remember-me&quot; name=&quot;remember-me&quot; type=&quot;checkbox&quot;/&gt; 记住我</span><br><span class="line">        &lt;input type=&quot;submit&quot; value=&quot;登录&quot;/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h5 id="4-2-修改index-html"><a href="#4-2-修改index-html" class="headerlink" title="4.2 修改index.html"></a>4.2 修改index.html</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html xmlns:th=&quot;http://www.thymeleaf.org&quot;</span><br><span class="line">      xmlns:sec=&quot;http://www.w3.org/1999/xhtml&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;/&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;/&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;/&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;title&gt;Spring Security 登录认证记住我实例&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=&quot;container&quot;&gt;</span><br><span class="line">    &lt;h1&gt;Spring Security 登录认证记住我实例&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">        &lt;p&gt;</span><br><span class="line">            &lt;span sec:authorize=&quot;isAuthenticated()&quot;&gt;</span><br><span class="line">                    | 登录用户: &lt;span sec:authentication=&quot;name&quot;&gt;&lt;/span&gt; |</span><br><span class="line">                    角色: &lt;span sec:authentication=&quot;principal.authorities&quot;&gt;&lt;/span&gt; |</span><br><span class="line">                    &lt;a th:href=&quot;@&#123;/logout&#125;&quot;&gt;退出登录&lt;/a&gt;</span><br><span class="line">                &lt;/span&gt;</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h1 id="五、启动Application-java运行项目"><a href="#五、启动Application-java运行项目" class="headerlink" title="五、启动Application.java运行项目"></a>五、启动Application.java运行项目</h1><h5 id="5-1-项目启动完成后，浏览器访问：localhsot-8080，会自动跳到登录页面进行登录，并勾选记住我。"><a href="#5-1-项目启动完成后，浏览器访问：localhsot-8080，会自动跳到登录页面进行登录，并勾选记住我。" class="headerlink" title="5.1 项目启动完成后，浏览器访问：localhsot:8080，会自动跳到登录页面进行登录，并勾选记住我。"></a>5.1 项目启动完成后，浏览器访问：localhsot:8080，会自动跳到登录页面进行登录，并勾选记住我。</h5><p><img src="https://upload-images.jianshu.io/upload_images/5134062-3397402e580829d9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h5 id="5-2-登录成功后会挑战到index-html页面，通过debug发现，spring-security已经为我们分配了刚才命名的cookie。"><a href="#5-2-登录成功后会挑战到index-html页面，通过debug发现，spring-security已经为我们分配了刚才命名的cookie。" class="headerlink" title="5.2 登录成功后会挑战到index.html页面，通过debug发现，spring security已经为我们分配了刚才命名的cookie。"></a>5.2 登录成功后会挑战到index.html页面，通过debug发现，spring security已经为我们分配了刚才命名的cookie。</h5><p><img src="https://upload-images.jianshu.io/upload_images/5134062-1b08f29a2a3b5533.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h5 id="5-3-为了验证是记住我登录，我们把JSESSIONID删除，并刷新页面，会发现又刚删除的JSESSIONID又产生了。而且Value值已经改变。"><a href="#5-3-为了验证是记住我登录，我们把JSESSIONID删除，并刷新页面，会发现又刚删除的JSESSIONID又产生了。而且Value值已经改变。" class="headerlink" title="5.3 为了验证是记住我登录，我们把JSESSIONID删除，并刷新页面，会发现又刚删除的JSESSIONID又产生了。而且Value值已经改变。"></a>5.3 为了验证是记住我登录，我们把JSESSIONID删除，并刷新页面，会发现又刚删除的JSESSIONID又产生了。而且Value值已经改变。</h5><p><img src="https://upload-images.jianshu.io/upload_images/5134062-ad4380d2125acca8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;p&gt;本篇文章基于&lt;a href=&quot;https://www.jianshu.com/p/fa8c3dd4697d&quot; target=&quot;_blank&quot;
      
    
    </summary>
    
      <category term="后端" scheme="https://blog.ffspace.cn/categories/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="Spring Security" scheme="https://blog.ffspace.cn/categories/%E5%90%8E%E7%AB%AF/Spring-Security/"/>
    
    
      <category term="Spring" scheme="https://blog.ffspace.cn/tags/Spring/"/>
    
      <category term="Spring Security" scheme="https://blog.ffspace.cn/tags/Spring-Security/"/>
    
  </entry>
  
  <entry>
    <title>Spring Security教程(二) --- 基于数据库信息进行验证</title>
    <link href="https://blog.ffspace.cn/2019/05/22/Spring-Security-%E6%95%99%E7%A8%8B%EF%BC%88%E4%BA%8C%EF%BC%89---%E5%9F%BA%E4%BA%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BF%A1%E6%81%AF%E8%BF%9B%E8%A1%8C%E9%AA%8C%E8%AF%81/"/>
    <id>https://blog.ffspace.cn/2019/05/22/Spring-Security-教程（二）---基于数据库信息进行验证/</id>
    <published>2019-05-22T14:10:00.000Z</published>
    <updated>2020-11-02T02:24:16.706Z</updated>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>本篇文章将讲解使用Spring Security + Mybatis + Mysql数据库实现简单的登录校验，以及密码加密校验。</p><p>项目代码：<a href="https://github.com/Bootcap/spring-security-study-session" target="_blank" rel="noopener">https://github.com/Bootcap/spring-security-study-session</a></p><h1 id="一、创建数据库和需要的表结构"><a href="#一、创建数据库和需要的表结构" class="headerlink" title="一、创建数据库和需要的表结构"></a>一、创建数据库和需要的表结构</h1><h5 id="1-1-创建数据库"><a href="#1-1-创建数据库" class="headerlink" title="1.1 创建数据库"></a>1.1 创建数据库</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">create database user;</span><br><span class="line">use user;</span><br></pre></td></tr></table></figure><h5 id="1-2-创建user-info表，执行sql脚本生成"><a href="#1-2-创建user-info表，执行sql脚本生成" class="headerlink" title="1.2 创建user_info表，执行sql脚本生成"></a>1.2 创建user_info表，执行sql脚本生成</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">SET NAMES utf8mb4;</span><br><span class="line">SET FOREIGN_KEY_CHECKS = 0;</span><br><span class="line"></span><br><span class="line">DROP TABLE IF EXISTS `user_info`;</span><br><span class="line">CREATE TABLE `user_info`  (</span><br><span class="line">  `user_id` int(11) NOT NULL AUTO_INCREMENT COMMENT &apos;主键，自增&apos;,</span><br><span class="line">  `user_name` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT &apos;用户名&apos;,</span><br><span class="line">  `user_password` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT &apos;用户密码&apos;,</span><br><span class="line">  `user_roles` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT &apos;用户角色&apos;,</span><br><span class="line">  PRIMARY KEY (`user_id`) USING BTREE</span><br><span class="line">) ENGINE = InnoDB AUTO_INCREMENT = 4 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;</span><br><span class="line"></span><br><span class="line">INSERT INTO `user_info` VALUES (1, &apos;1&apos;, &apos;1&apos;, &apos;ROLE_USER&apos;);</span><br><span class="line">INSERT INTO `user_info` VALUES (2, &apos;user&apos;, &apos;123456&apos;, &apos;ROLE_USER&apos;);</span><br><span class="line">INSERT INTO `user_info` VALUES (3, &apos;user2&apos;, &apos;$2a$10$RHWoRd6hPXffZemAD7Gp6ehhf929etTHVGm7JGBeJTNQIgVURnSb.&apos;, &apos;ROLE_USER&apos;);</span><br><span class="line"></span><br><span class="line">SET FOREIGN_KEY_CHECKS = 1;</span><br></pre></td></tr></table></figure><h1 id="二、修改配置"><a href="#二、修改配置" class="headerlink" title="二、修改配置"></a>二、修改配置</h1><h5 id="2-1-修改pom-xml"><a href="#2-1-修改pom-xml" class="headerlink" title="2.1 修改pom.xml"></a>2.1 修改pom.xml</h5><p>在上篇文章所需jar包的基础上引入mysql和mybatis相关包。<a href="https://github.com/Bootcap/spring-security-study-session/blob/master/spring-security-02/pom.xml" target="_blank" rel="noopener">查看完整pom.xml</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Mybatis --&gt;</span><br><span class="line"> &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.3.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><h5 id="2-2-修改application-yml"><a href="#2-2-修改application-yml" class="headerlink" title="2.2 修改application.yml"></a>2.2 修改application.yml</h5><p>在上篇文章resources/application.yml的基础上增加”数据源配置”和”日志配置”<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># 端口号</span><br><span class="line">server:</span><br><span class="line">  port: 8080</span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  # thymeleaf配置</span><br><span class="line">  thymeleaf:</span><br><span class="line">    enabled: true</span><br><span class="line">    encoding: UTF-8</span><br><span class="line">    mode: HTML</span><br><span class="line">    servlet:</span><br><span class="line">      content-type: text/html</span><br><span class="line">    prefix: classpath:/templates/</span><br><span class="line">    suffix: .html</span><br><span class="line">  # 数据源配置</span><br><span class="line">  datasource:</span><br><span class="line">    url: jdbc:mysql://127.0.0.1:3306/user?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false # 修改为自己数据库所在ip地址</span><br><span class="line">    driver-class-name: com.mysql.jdbc.Driver</span><br><span class="line">    username: root # 默认用户名，修改为自己的数据库用户名</span><br><span class="line">    password: # 填写自己的密码</span><br><span class="line"></span><br><span class="line">logging:</span><br><span class="line">  level:</span><br><span class="line">    root: INFO</span><br><span class="line">    org.springframework.web: INFO</span><br><span class="line">    org.springframework.security: INFO</span><br></pre></td></tr></table></figure></p><h1 id="三、创建CRUD操作的相关类"><a href="#三、创建CRUD操作的相关类" class="headerlink" title="三、创建CRUD操作的相关类"></a>三、创建CRUD操作的相关类</h1><p>经过上面的配置修改后，还需要有一套完整的CRUD操作，本篇文章仅介绍注册和登录校验，因此只有注册和登录校验操作。</p><h5 id="3-1-创建数据库实体类（UserInfo-java）"><a href="#3-1-创建数据库实体类（UserInfo-java）" class="headerlink" title="3.1 创建数据库实体类（UserInfo.java）"></a>3.1 创建数据库实体类（UserInfo.java）</h5><p> 路径：com/bootcap/session/security/entity/UserInfo.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">package com.bootcap.session.security.entity;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 数据库实体类</span><br><span class="line"> * 2018-12-10 16:21</span><br><span class="line"> */</span><br><span class="line">public class UserInfo &#123;</span><br><span class="line">    private Integer id;</span><br><span class="line">    private String userName;</span><br><span class="line">    private String password;</span><br><span class="line">    private String roles;</span><br><span class="line"></span><br><span class="line">    public Integer getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(Integer id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getUserName() &#123;</span><br><span class="line">        return userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setUserName(String userName) &#123;</span><br><span class="line">        this.userName = userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getPassword() &#123;</span><br><span class="line">        return password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPassword(String password) &#123;</span><br><span class="line">        this.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getRoles() &#123;</span><br><span class="line">        return roles;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setRoles(String roles) &#123;</span><br><span class="line">        this.roles = roles;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;UserInfo&#123;&quot; +</span><br><span class="line">                &quot;id=&quot; + id +</span><br><span class="line">                &quot;, userName=&apos;&quot; + userName + &apos;\&apos;&apos; +</span><br><span class="line">                &quot;, password=&apos;&quot; + password + &apos;\&apos;&apos; +</span><br><span class="line">                &quot;, roles=&apos;&quot; + roles + &apos;\&apos;&apos; +</span><br><span class="line">                &apos;&#125;&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="3-2-创建映射文件（UserInfoMapper-java）"><a href="#3-2-创建映射文件（UserInfoMapper-java）" class="headerlink" title="3.2 创建映射文件（UserInfoMapper.java）"></a>3.2 创建映射文件（UserInfoMapper.java）</h5><blockquote><p>【提示】: 本文直接使用mybatis的注解形式进行<br>sql编写</p></blockquote><p>路径：<br>com/bootcap/session/security/mapper/UserInfoMapper.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">package com.bootcap.session.security.mapper;</span><br><span class="line"></span><br><span class="line">import com.bootcap.session.security.entity.UserInfo;</span><br><span class="line">import org.apache.ibatis.annotations.*;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * UserInfo映射类</span><br><span class="line"> * 2018-12-10 16:26</span><br><span class="line"> * 两个注解区别，网络上说是使用该@Repository注解需要配置xml映射文件，但是小编更改后并未出现异常。</span><br><span class="line"> */</span><br><span class="line">// @Mapper</span><br><span class="line">@Repository</span><br><span class="line">public interface UserInfoMapper &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 新增</span><br><span class="line">     * @param userInfo</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @Insert(&quot;insert into user_info(user_name,user_password,user_roles) values(#&#123;userName&#125;,#&#123;password&#125;, #&#123;roles&#125;)&quot;)</span><br><span class="line">    int insert(UserInfo userInfo);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 查询</span><br><span class="line">     */</span><br><span class="line">    @Select(&quot;select user_name as userName,user_password as password,user_roles as roles,user_id as id from user_info where user_name = #&#123;userName&#125;&quot;)</span><br><span class="line">    UserInfo selectByUserName(@Param(&quot;userName&quot;) String userName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="3-3-创建业务层类（UserInfoService-java）"><a href="#3-3-创建业务层类（UserInfoService-java）" class="headerlink" title="3.3 创建业务层类（UserInfoService.java）"></a>3.3 创建业务层类（UserInfoService.java）</h5><p>路径：com/bootcap/session/security/mapper/UserInfoService.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">package com.bootcap.session.security.service;</span><br><span class="line"></span><br><span class="line">import com.bootcap.session.security.constant.RolesContant;</span><br><span class="line">import com.bootcap.session.security.entity.UserInfo;</span><br><span class="line">import com.bootcap.session.security.mapper.UserInfoMapper;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * service业务层</span><br><span class="line"> * 2018-12-10 16:37</span><br><span class="line"> */</span><br><span class="line">@Service</span><br><span class="line">public class UserInfoService &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    UserInfoMapper userInfoMapper;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 新增用户</span><br><span class="line">     * @param userInfo</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public boolean insert(UserInfo userInfo) &#123;</span><br><span class="line">        UserInfo userInfo1 = userInfoMapper.selectByUserName(userInfo.getUserName());</span><br><span class="line">        if (userInfo1 != null)&#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        userInfo.setRoles(RolesContant.USER);</span><br><span class="line">        // 加密保存密码到数据库</span><br><span class="line">        userInfo.setPassword(new BCryptPasswordEncoder().encode(userInfo.getPassword()));</span><br><span class="line">        int result = userInfoMapper.insert(userInfo);</span><br><span class="line">        return result == 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 查询用户</span><br><span class="line">     * @param username</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public UserInfo selectUserInfo(String username) &#123;</span><br><span class="line">        return userInfoMapper.selectByUserName(username);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>【说明】: 由于业务代码使用了常量类，因此需要创建一个枚举类RolesContant.java，内容如下: public static final String USER = “ROLE_USER”;</p></blockquote><h5 id="3-4-创建控制层（UserController-java）"><a href="#3-4-创建控制层（UserController-java）" class="headerlink" title="3.4 创建控制层（UserController.java）"></a>3.4 创建控制层（UserController.java）</h5><p>路径：com/bootcap/session/security/mapper/UserController.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">package com.bootcap.session.security.controller;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 2018-12-10 17:02</span><br><span class="line"> */</span><br><span class="line">@Controller</span><br><span class="line">public class UserController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    UserInfoService userInfoService;</span><br><span class="line"></span><br><span class="line">    @PostMapping(&quot;/register&quot;)</span><br><span class="line">    public String doRegister(UserInfo userInfo)&#123;</span><br><span class="line">        boolean insert = userInfoService.insert(userInfo);</span><br><span class="line">        if (insert)&#123;</span><br><span class="line">            return &quot;redirect:sign?success&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        return &quot;redirect:sign?error&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;/user&quot;)</span><br><span class="line">    public String user(@AuthenticationPrincipal Principal principal, Model model)&#123;</span><br><span class="line">        model.addAttribute(&quot;username&quot;, principal.getName());</span><br><span class="line">        return &quot;user/user&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="四、配置Spring-Security获取数据库数据进行校验"><a href="#四、配置Spring-Security获取数据库数据进行校验" class="headerlink" title="四、配置Spring Security获取数据库数据进行校验"></a>四、配置Spring Security获取数据库数据进行校验</h1><p><img src="https://upload-images.jianshu.io/upload_images/5134062-6242996b91be3782.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><blockquote><p>【说明】: 从流程图中我们可以得到，Spring Security最终使用UserDetailsService.loadUserByUsername()方法连接数据库获取数据并返回给校验类进行校验，因此我们需要在项目中实现该接口。</p></blockquote><h5 id="4-1-创建MyUserDetailsService-java类并实现UsesrDetailsService"><a href="#4-1-创建MyUserDetailsService-java类并实现UsesrDetailsService" class="headerlink" title="4.1 创建MyUserDetailsService.java类并实现UsesrDetailsService"></a>4.1 创建MyUserDetailsService.java类并实现UsesrDetailsService</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">package com.bootcap.session.security.configuration;</span><br><span class="line"></span><br><span class="line">import com.bootcap.session.security.service.UserInfoService;</span><br><span class="line">import com.bootcap.session.security.entity.UserInfo;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.security.core.authority.SimpleGrantedAuthority;</span><br><span class="line">import org.springframework.security.core.userdetails.User;</span><br><span class="line">import org.springframework.security.core.userdetails.UserDetails;</span><br><span class="line">import org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class="line">import org.springframework.security.core.userdetails.UsernameNotFoundException;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line">/**</span><br><span class="line"> * 自定义登录校验Service</span><br><span class="line"> * 2018-12-10 17:23</span><br><span class="line"> */</span><br><span class="line">@Service</span><br><span class="line">public class MyUserDetailsService implements UserDetailsService &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    UserInfoService userInfoService;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public UserDetails loadUserByUsername(String userName) throws UsernameNotFoundException &#123;</span><br><span class="line">        UserInfo userInfo = userInfoService.selectUserInfo(userName);</span><br><span class="line">        if (userInfo == null) &#123;</span><br><span class="line">            throw new UsernameNotFoundException(&quot;用户不存在&quot;); // 若不存在抛出用户不存在异常</span><br><span class="line">        &#125;</span><br><span class="line">        // 权限字符串转化</span><br><span class="line">        List&lt;SimpleGrantedAuthority&gt; simpleGrantedAuthorities = new ArrayList&lt;&gt;();</span><br><span class="line">        String[] roles = userInfo.getRoles().split(&quot;,&quot;);// 获取后的Roles必须有ROLE_前缀，否则会抛Access is denied无权限异常</span><br><span class="line">        for (String role : roles) &#123;</span><br><span class="line">            simpleGrantedAuthorities.add(new SimpleGrantedAuthority(role));</span><br><span class="line">        &#125;</span><br><span class="line">        // 交给security进行验证并返回</span><br><span class="line">        return new User(userInfo.getUserName(), userInfo.getPassword(), simpleGrantedAuthorities);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-2-修改WebSecurityConfig-java调用"><a href="#4-2-修改WebSecurityConfig-java调用" class="headerlink" title="4.2 修改WebSecurityConfig.java调用"></a>4.2 修改WebSecurityConfig.java调用</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">package com.bootcap.session.security.configuration;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;</span><br><span class="line">import org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line">import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;</span><br><span class="line">import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line">import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 2018-12-10 11:03</span><br><span class="line"> */</span><br><span class="line">@Configuration</span><br><span class="line">@EnableWebSecurity</span><br><span class="line">public class WebSecurityConfig extends WebSecurityConfigurerAdapter &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    MyUserDetailsService myUserDetailsService;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void configure(HttpSecurity http) throws Exception &#123;</span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .antMatchers(&quot;/&quot;,&quot;/index&quot;).permitAll() // permitAll被允许访问</span><br><span class="line">                .antMatchers(&quot;/user/**&quot;).hasRole(&quot;USER&quot;)// 指定所有user页面需要USER角色才能访问</span><br><span class="line">            .and()</span><br><span class="line">                .formLogin().loginPage(&quot;/login&quot;).defaultSuccessUrl(&quot;/user&quot;)</span><br><span class="line">            .and()</span><br><span class="line">                .logout().logoutUrl(&quot;/logout&quot;).logoutSuccessUrl(&quot;/login&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void configure(AuthenticationManagerBuilder auth) throws Exception &#123;</span><br><span class="line">//        auth.inMemoryAuthentication() // 在内存中进行身份验证</span><br><span class="line">//                .passwordEncoder(new BCryptPasswordEncoder())</span><br><span class="line">//                .withUser(&quot;user&quot;)</span><br><span class="line">//                .password(new BCryptPasswordEncoder().encode(&quot;123456&quot;))</span><br><span class="line">//                .roles(&quot;USER&quot;);</span><br><span class="line"></span><br><span class="line">// 修改的地方，将上篇文章的内存验证改为获取数据库，并使用了密码加密         </span><br><span class="line">auth.userDetailsService(myUserDetailsService).passwordEncoder(new BCryptPasswordEncoder());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="扩展：对密码进行加密"><a href="#扩展：对密码进行加密" class="headerlink" title="扩展：对密码进行加密"></a>扩展：对密码进行加密</h5><p>1、修改WebSecurityConfig.configure()方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">auth.userDetailsService(myUserDetailsService).passwordEncoder(new BCryptPasswordEncoder());</span><br></pre></td></tr></table></figure></p><p>2、在UserInfoService.insert()方法对password字段进行加密存储<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public boolean insert(UserInfo userInfo) &#123;</span><br><span class="line">       UserInfo userInfo1 = userInfoMapper.selectByUserName(userInfo.getUserName());</span><br><span class="line">       if (userInfo1 != null)&#123;</span><br><span class="line">           return false;</span><br><span class="line">       &#125;</span><br><span class="line">       userInfo.setRoles(RolesContant.USER);</span><br><span class="line">       userInfo.setPassword(new BCryptPasswordEncoder().encode(userInfo.getPassword()));</span><br><span class="line">       int result = userInfoMapper.insert(userInfo);</span><br><span class="line">       return result == 1;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h5 id="4-3-修改TemplateConfig-java（用于新增的注册页面）"><a href="#4-3-修改TemplateConfig-java（用于新增的注册页面）" class="headerlink" title="4.3 修改TemplateConfig.java（用于新增的注册页面）"></a>4.3 修改TemplateConfig.java（用于新增的注册页面）</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class TemplateConfig implements WebMvcConfigurer &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void addViewControllers(ViewControllerRegistry registry) &#123;</span><br><span class="line">        registry.addViewController(&quot;/&quot;).setViewName(&quot;index&quot;);</span><br><span class="line">        registry.addViewController(&quot;/index&quot;).setViewName(&quot;index&quot;);</span><br><span class="line">        registry.addViewController(&quot;/hello&quot;).setViewName(&quot;hello&quot;);</span><br><span class="line">        registry.addViewController(&quot;/login&quot;).setViewName(&quot;login&quot;);</span><br><span class="line">        // 新增注册页面</span><br><span class="line">       registry.addViewController(&quot;/sign&quot;).setViewName(&quot;register&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-4-上述配置完成后，我们需要增加和修改几个页面用于测试"><a href="#4-4-上述配置完成后，我们需要增加和修改几个页面用于测试" class="headerlink" title="4.4 上述配置完成后，我们需要增加和修改几个页面用于测试"></a>4.4 上述配置完成后，我们需要增加和修改几个页面用于测试</h5><p>4.4.1 修改login.html（增加跳转到注册连接）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot; xmlns=&quot;http://www.w3.org/1999/xhtml&quot; xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;登录页面&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;登录页面&lt;/h1&gt;</span><br><span class="line">&lt;div th:if=&quot;$&#123;param.error&#125;&quot;&gt;</span><br><span class="line">    用户名或密码不正确</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div th:if=&quot;$&#123;param.logout&#125;&quot;&gt;</span><br><span class="line">    你已经退出登录</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;form th:action=&quot;@&#123;/login&#125;&quot; method=&quot;post&quot;&gt;</span><br><span class="line">    &lt;div&gt;&lt;label&gt; 用户名: &lt;input type=&quot;text&quot; name=&quot;username&quot;/&gt; &lt;/label&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;&lt;label&gt; 密&amp;nbsp;&amp;nbsp;&amp;nbsp;码: &lt;input type=&quot;password&quot; name=&quot;password&quot;/&gt; &lt;/label&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;input type=&quot;submit&quot; value=&quot;登录&quot;/&gt;</span><br><span class="line">        &lt;a th:href=&quot;@&#123;/sign&#125;&quot;&gt;注册&lt;/a&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>4.4.2 新增register.html注册页面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;html xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</span><br><span class="line">    &lt;title&gt;注册&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=&quot;panel-body&quot;&gt;</span><br><span class="line">    &lt;h1&gt;注册页面&lt;/h1&gt;</span><br><span class="line">    &lt;form th:action=&quot;@&#123;/register&#125;&quot; method=&quot;post&quot;&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            账号: &lt;input type=&quot;text&quot; name=&quot;userName&quot; id=&quot;username&quot; placeholder=&quot;账号&quot;&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            密码: &lt;input type=&quot;password&quot; class=&quot;form-control&quot; name=&quot;password&quot; id=&quot;password&quot; placeholder=&quot;密码&quot;&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;br&gt;</span><br><span class="line">        &lt;div th:if=&quot;$&#123;param.error&#125;&quot;&gt;</span><br><span class="line">            &lt;p&gt;注册失败，账号已存在！&lt;/p&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div th:if=&quot;$&#123;param.success&#125;&quot;&gt;</span><br><span class="line">            &lt;p&gt;注册成功，可以登录了！&lt;/p&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary btn-block&quot;&gt;注册&lt;/button&gt;</span><br><span class="line">            &lt;a href=&quot;/login&quot;&gt;返回登录页面&lt;/a&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>4.4.3 新增user.html（用于登录后跳转的页面）<br>路径：templates/user/user.html<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;html xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</span><br><span class="line">    &lt;title&gt;用户界面&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;container&quot; style=&quot;margin-top: 60px&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div style=&quot;text-align: center; margin-top: 10%&quot;&gt;</span><br><span class="line">        &lt;p th:text=&quot;$&#123;username&#125;&quot; style=&quot;margin-top: 25px; font-size: 20px; color: crimson&quot;&gt;&lt;/p&gt;</span><br><span class="line">        &lt;form th:action=&quot;@&#123;/logout&#125;&quot; method=&quot;post&quot;&gt;</span><br><span class="line">            &lt;button style=&quot;margin-top: 20px&quot;&gt;退出登录&lt;/button&gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><h1 id="五、启动运行"><a href="#五、启动运行" class="headerlink" title="五、启动运行"></a>五、启动运行</h1><p>至此，基本修改已经完毕，这时候可以启动Application.java启动运行了？答案：不能！！！</p><blockquote><p>【提示】: 本项目的启动类是在app包下，因此我们配置的mapper映射文件的@Repository注解为mybatis的注解，所以boot不会自动注入，因此需要加入@MapperScan(basePackages = “com.bootcap.session.security.mapper”)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package com.bootcap.session.security.app;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 启动类</span><br><span class="line"> * 2018-12-10 11:03</span><br><span class="line"> */</span><br><span class="line">@SpringBootApplication</span><br><span class="line">@ComponentScan(basePackages = &#123;&quot;com.bootcap.session.security&quot;&#125;)</span><br><span class="line">@MapperScan(basePackages = &quot;com.bootcap.session.security.mapper&quot;)</span><br><span class="line">public class Application &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(Application.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h1 id="六、测试结果"><a href="#六、测试结果" class="headerlink" title="六、测试结果"></a>六、测试结果</h1><p>6.1 项目启动后，浏览器访问：localhost:8080/user,会发现直接跳转到登录页<br><img src="https://upload-images.jianshu.io/upload_images/5134062-2f4a576add65da55.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>6.2 目前我们没有账号，点击注册按钮进行注册，注册好后。我们使用注册的账号进行登录 ，可以正常进入user页面<br><img src="https://upload-images.jianshu.io/upload_images/5134062-211e476aa23eb9a2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h1 id="七、扩展篇-自定义Filter过滤器"><a href="#七、扩展篇-自定义Filter过滤器" class="headerlink" title="七、扩展篇 - 自定义Filter过滤器"></a>七、扩展篇 - 自定义Filter过滤器</h1><h5 id="7-1-创建两个自定义Filter过滤器（BeforeFilter-java和BeforeFilter-java）"><a href="#7-1-创建两个自定义Filter过滤器（BeforeFilter-java和BeforeFilter-java）" class="headerlink" title="7.1 创建两个自定义Filter过滤器（BeforeFilter.java和BeforeFilter.java）"></a>7.1 创建两个自定义Filter过滤器（BeforeFilter.java和BeforeFilter.java）</h5><p>路径：com/bootcap/session/security/filter<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package com.bootcap.session.security.filter;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * BeforeFilter</span><br><span class="line"> * 2018-12-12 10:44</span><br><span class="line"> */</span><br><span class="line">public class BeforeFilter extends GenericFilterBean &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException &#123;</span><br><span class="line">        System.out.println(&quot;在 UsernamePasswordAuthenticationFilter 前添加 BeforeLoginFilter&quot;);</span><br><span class="line">        // 继续调用 Filter 链</span><br><span class="line">        filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">package com.bootcap.session.security.filter;</span><br><span class="line">/**</span><br><span class="line"> * AfterCsrfFilter</span><br><span class="line"> * 2018-12-12 10:46</span><br><span class="line"> */</span><br><span class="line">public class AfterCsrfFilter extends GenericFilterBean &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException &#123;</span><br><span class="line">        System.out.println(&quot;在 CsrfFilter 后添加 AfterCsrfFilter&quot;);</span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="7-2-在WebSecurityConfig-configure-方法中加入调用"><a href="#7-2-在WebSecurityConfig-configure-方法中加入调用" class="headerlink" title="7.2 在WebSecurityConfig.configure()方法中加入调用"></a>7.2 在WebSecurityConfig.configure()方法中加入调用</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">    protected void configure(HttpSecurity http) throws Exception &#123;</span><br><span class="line">         ... 省略部分代码 ...</span><br><span class="line">        // 在 UsernamePasswordAuthenticationFilter 前添加 BeforeLoginFilter</span><br><span class="line">        http.addFilterBefore(new BeforeFilter(), UsernamePasswordAuthenticationFilter.class);</span><br><span class="line"></span><br><span class="line">        // 在 CsrfFilter 后添加 AfterCsrfFilter</span><br><span class="line">        http.addFilterAfter(new AfterCsrfFilter(), CsrfFilter.class);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="7-3-运行程序并访问任意可访问页面，我们能够的到两个过滤器的执行顺序"><a href="#7-3-运行程序并访问任意可访问页面，我们能够的到两个过滤器的执行顺序" class="headerlink" title="7.3 运行程序并访问任意可访问页面，我们能够的到两个过滤器的执行顺序"></a>7.3 运行程序并访问任意可访问页面，我们能够的到两个过滤器的执行顺序</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">2018-12-12 10:49:34.607  INFO 1060 --- [nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring FrameworkServlet &apos;dispatcherServlet&apos;</span><br><span class="line">2018-12-12 10:49:34.607  INFO 1060 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : FrameworkServlet &apos;dispatcherServlet&apos;: initialization started</span><br><span class="line">2018-12-12 10:49:34.611  INFO 1060 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : FrameworkServlet &apos;dispatcherServlet&apos;: initialization completed in 4 ms</span><br><span class="line">在 CsrfFilter 后添加 AfterCsrfFilter</span><br><span class="line">在 UsernamePasswordAuthenticationFilter 前添加 BeforeLoginFilter</span><br><span class="line">在 CsrfFilter 后添加 AfterCsrfFilter</span><br><span class="line">在 UsernamePasswordAuthenticationFilter 前添加 BeforeLoginFilter</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;p&gt;本篇文章将讲解使用Spring Security + Mybatis + Mysql数据库实现简单的登录校验，以及密码加密校验。&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="后端" scheme="https://blog.ffspace.cn/categories/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="Spring Security" scheme="https://blog.ffspace.cn/categories/%E5%90%8E%E7%AB%AF/Spring-Security/"/>
    
    
      <category term="Spring" scheme="https://blog.ffspace.cn/tags/Spring/"/>
    
      <category term="Spring Security" scheme="https://blog.ffspace.cn/tags/Spring-Security/"/>
    
  </entry>
  
  <entry>
    <title>Spring Security教程(一) --- 简单的登录认证</title>
    <link href="https://blog.ffspace.cn/2019/05/22/Spring-Security-%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89---%E7%AE%80%E5%8D%95%E7%9A%84%E7%99%BB%E5%BD%95%E8%AE%A4%E8%AF%81/"/>
    <id>https://blog.ffspace.cn/2019/05/22/Spring-Security-教程（一）---简单的登录认证/</id>
    <published>2019-05-22T14:00:00.000Z</published>
    <updated>2020-11-02T02:24:16.705Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、Spring-Security-概述"><a href="#一、Spring-Security-概述" class="headerlink" title="一、Spring Security 概述"></a>一、Spring Security 概述</h1><p>Spring Security是一个功能强大且高度可定制的身份验证和访问控制框架。它实际上是保护基于spring的应用程序的标准，也是一个专注于向Java应用程序提供身份验证和授权的框架。<br>连接：<a href="https://spring.io/projects/spring-security" target="_blank" rel="noopener">Spring Security</a></p><p>项目代码：<a href="https://github.com/Bootcap/spring-security-study-session" target="_blank" rel="noopener">https://github.com/Bootcap/spring-security-study-session</a></p><h1 id="二、环境要求"><a href="#二、环境要求" class="headerlink" title="二、环境要求"></a>二、环境要求</h1><ul><li>JDK ≥1.7</li><li>Maven 3.0+</li><li>IntelliJ IDEA/eclipse<blockquote><p><strong>【提示】</strong>: 本文以 IDEA 和 maven 以及Spring Boot 2.0 为例进行教程</p></blockquote></li></ul><h1 id="三、使用Maven进行构建"><a href="#三、使用Maven进行构建" class="headerlink" title="三、使用Maven进行构建"></a>三、使用Maven进行构建</h1><p>在pom.xml文件中引入相关的jar包（不含security）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">  &lt;name&gt;spring-security-study-session&lt;/name&gt;</span><br><span class="line">  &lt;groupId&gt;com.bootcap.session.security&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;spring-security-study-session&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">  &lt;parent&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.0.1.RELEASE&lt;/version&gt;</span><br><span class="line">  &lt;/parent&gt;</span><br><span class="line"></span><br><span class="line">  &lt;properties&gt;</span><br><span class="line">    &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">    &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</span><br><span class="line">  &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">      &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-security-test&lt;/artifactId&gt;</span><br><span class="line">      &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">  &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">  &lt;build&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">      &lt;plugin&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">      &lt;/plugin&gt;</span><br><span class="line">    &lt;/plugins&gt;</span><br><span class="line">  &lt;/build&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure></p><p>在项目的src/main/resources下进行配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 端口号</span><br><span class="line">server:</span><br><span class="line">  port: 8080</span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  # thymeleaf配置</span><br><span class="line">  thymeleaf:</span><br><span class="line">    enabled: true</span><br><span class="line">    encoding: UTF-8</span><br><span class="line">    mode: HTML</span><br><span class="line">    servlet:</span><br><span class="line">      content-type: text/html</span><br><span class="line">    prefix: classpath:/templates/</span><br><span class="line">    suffix: .html</span><br></pre></td></tr></table></figure></p><h1 id="四、创建一个不受保护的web页面"><a href="#四、创建一个不受保护的web页面" class="headerlink" title="四、创建一个不受保护的web页面"></a>四、创建一个不受保护的web页面</h1><p>Web页面包含两个简单的视图：index主页和“hello”页面，都定义在Thymeleaf模板中。 </p><h4 id="4-1-Index页面"><a href="#4-1-Index页面" class="headerlink" title="4.1 Index页面"></a>4.1 Index页面</h4><p>路径：src/main/resources/templates/index.html<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot; xmlns=&quot;http://www.w3.org/1999/xhtml&quot; xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Spring Security Index&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Index Page&lt;/h1&gt;</span><br><span class="line">    &lt;a th:href=&quot;@&#123;/hello&#125;&quot;&gt;点击前往hello页面&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><blockquote><p><strong>【注意】</strong>: 使用thymeleaf时需要在<html>标签后面加入xmlns=”<a href="http://www.w3.org/1999/xhtml&quot;" target="_blank" rel="noopener">http://www.w3.org/1999/xhtml&quot;</a> xmlns:th=”<a href="http://www.thymeleaf.org&quot;" target="_blank" rel="noopener">http://www.thymeleaf.org&quot;</a> 属性，才能被编译器解析为thymeleaf模板</html></p></blockquote><h4 id="4-2-Hello页面"><a href="#4-2-Hello页面" class="headerlink" title="4.2 Hello页面"></a>4.2 Hello页面</h4><p>路径：src/main/resources/templates/hello.html</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot; xmlns=&quot;http://www.w3.org/1999/xhtml&quot; xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Hello&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Hello Spring Security&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>从上面index.html可以看到包含了一个”/hello”连接点击跳转到hello.html页面的简单流程</p><h1 id="五、配置Spring-MVC视图控制器"><a href="#五、配置Spring-MVC视图控制器" class="headerlink" title="五、配置Spring MVC视图控制器"></a>五、配置Spring MVC视图控制器</h1><h5 id="由于Web应用程序基于Spring-MVC。-因此，需要配置视图控制器来暴露这些模板。"><a href="#由于Web应用程序基于Spring-MVC。-因此，需要配置视图控制器来暴露这些模板。" class="headerlink" title="由于Web应用程序基于Spring MVC。 因此，需要配置视图控制器来暴露这些模板。"></a>由于Web应用程序基于Spring MVC。 因此，需要配置视图控制器来暴露这些模板。</h5><p>路径：src/main/java/com/bootcap/session/security/configuration/TemplateConfig.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">package com.bootcap.session.security.configuration;</span><br><span class="line"></span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.web.servlet.config.annotation.ViewControllerRegistry;</span><br><span class="line">import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">public class TemplateConfig implements WebMvcConfigurer &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void addViewControllers(ViewControllerRegistry registry) &#123;</span><br><span class="line">        registry.addViewController(&quot;/&quot;).setViewName(&quot;index&quot;);</span><br><span class="line">        registry.addViewController(&quot;/index&quot;).setViewName(&quot;index&quot;);</span><br><span class="line">        registry.addViewController(&quot;/hello&quot;).setViewName(&quot;hello&quot;);</span><br><span class="line">        registry.addViewController(&quot;/login&quot;).setViewName(&quot;login&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="六、配置Spring-Boot启动类"><a href="#六、配置Spring-Boot启动类" class="headerlink" title="六、配置Spring Boot启动类"></a>六、配置Spring Boot启动类</h1><h5 id="6-1-到了这一步，我们需要将项目运行查看是否无异常，才进行下一步操作，因此需要配置spring-boot启动类"><a href="#6-1-到了这一步，我们需要将项目运行查看是否无异常，才进行下一步操作，因此需要配置spring-boot启动类" class="headerlink" title="6.1 到了这一步，我们需要将项目运行查看是否无异常，才进行下一步操作，因此需要配置spring boot启动类"></a>6.1 到了这一步，我们需要将项目运行查看是否无异常，才进行下一步操作，因此需要配置spring boot启动类</h5><p>路径：src/main/java/com/bootcap/session/security/app/Application.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package com.bootcap.session.security.app;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.context.annotation.ComponentScan;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">@ComponentScan(basePackages = &#123;&quot;com.bootcap.session.security&quot;&#125;)</span><br><span class="line">public class Application &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(Application.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="6-2-运行main方法，并在浏览器地址栏输入：http-localhost-8080-如果看到index-html页面，说明已经成功运行"><a href="#6-2-运行main方法，并在浏览器地址栏输入：http-localhost-8080-如果看到index-html页面，说明已经成功运行" class="headerlink" title="6.2 运行main方法，并在浏览器地址栏输入：http://localhost:8080/ 如果看到index.html页面，说明已经成功运行"></a>6.2 运行main方法，并在浏览器地址栏输入：<a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a> 如果看到index.html页面，说明已经成功运行</h5><p><img src="http://upload-images.jianshu.io/upload_images/5134062-30eb538d654add71?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h5 id="6-3-点击跳转到hello页面链接，无需任何认证即可进行跳转"><a href="#6-3-点击跳转到hello页面链接，无需任何认证即可进行跳转" class="headerlink" title="6.3 点击跳转到hello页面链接，无需任何认证即可进行跳转"></a>6.3 点击跳转到hello页面链接，无需任何认证即可进行跳转</h5><p><img src="http://upload-images.jianshu.io/upload_images/5134062-867198283265b808?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><blockquote><p>【小窍门】: 为什么要使用@ComponentScan注解：</p><ul><li>如果你的其他包都在使用了@SpringBootApplication注解的main方法所在的包及其下级包，则SpringBoot会自动帮你把其他包都扫描。</li><li>如果你有一些bean所在的包，不在@SpringBootApplication注解main方法的包及其下级包，那么你需要手动加上@ComponentScan注解并指定要寻找的bean所在的包路径。（详见上述代码中package的不同之处）</li></ul></blockquote><h1 id="七、引入并使用Spring-Security"><a href="#七、引入并使用Spring-Security" class="headerlink" title="七、引入并使用Spring Security"></a>七、引入并使用Spring Security</h1><p>在上述的两个视图中，我们希望在访问”/hello”时需要登录才能够进入Hello页面。此时我们可以通过Spring Security来实现。（如果Spring Security在类路径上，则Spring Boot会使用”Basic”认证自动保护所有HTTP请求，也可以自定义设置）</p><h4 id="7-1-pom-xml加入Spring-Security"><a href="#7-1-pom-xml加入Spring-Security" class="headerlink" title="7.1 pom.xml加入Spring Security"></a>7.1 pom.xml加入Spring Security</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">  ...</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><h4 id="7-2-配置只有认证过的用户才能访问hello-html"><a href="#7-2-配置只有认证过的用户才能访问hello-html" class="headerlink" title="7.2 配置只有认证过的用户才能访问hello.html"></a>7.2 配置只有认证过的用户才能访问hello.html</h4><p>路径：src/main/java/com/bootcap/session/security/configuration/WebSecurityConfig.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">package com.bootcap.session.security.configuration;</span><br><span class="line"></span><br><span class="line">import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;</span><br><span class="line">import org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line">import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">@EnableWebSecurity</span><br><span class="line">public class WebSecurityConfig extends WebSecurityConfigurerAdapter &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void configure(HttpSecurity http) throws Exception &#123;</span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .antMatchers(&quot;/&quot;,&quot;/index&quot;).permitAll() // permitAll被允许访问</span><br><span class="line">                .anyRequest().authenticated() // 其余的请求需要认证后才可允许访问</span><br><span class="line">                .and()</span><br><span class="line">            .formLogin()</span><br><span class="line">                .loginPage(&quot;/login&quot;)</span><br><span class="line">                .permitAll()</span><br><span class="line">                .and()</span><br><span class="line">            .logout()</span><br><span class="line">            .permitAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void configure(AuthenticationManagerBuilder auth) throws Exception &#123;</span><br><span class="line">        auth.inMemoryAuthentication() // 在内存中进行身份验证</span><br><span class="line">                .withUser(&quot;user&quot;)</span><br><span class="line">                .password(&quot;password&quot;)</span><br><span class="line">                .roles(&quot;USER&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>【说明】: </p><ul><li><p>WebSecurityConfig类使用了@EnableWebSecurity注解，以启用Spring Security的Web安全支持。</p></li><li><p>configure(HttpSecurity)方法自定义有哪些url需要被认证，哪些不需要。当用户登录后将会被重定向请求到需要身份认证的页面（hello.html），否则在用户未登录的情况下将会跳转到登录页面</p></li><li><p>configure(AuthenticationManagerBuilder)方法用于设置认证的条件保存于内存中，用户名为“user”，密码为“123456”，角色为User。同时该方法也可以修改认证方式为jdbc进行认证</p></li></ul></blockquote><p><strong>【注意】: 使用了Spring Boot 2.0以上的Security会存在There is no PasswordEncoder mapped for the id “null”异常，解决方案见底部“常见问题”</strong></p><h4 id="7-3-创建登录页面（认证时需要用到）"><a href="#7-3-创建登录页面（认证时需要用到）" class="headerlink" title="7.3 创建登录页面（认证时需要用到）"></a>7.3 创建登录页面（认证时需要用到）</h4><p>路径：src/main/resources/templates/login.html<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot; xmlns=&quot;http://www.w3.org/1999/xhtml&quot; xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;登录页面&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div th:if=&quot;$&#123;param.error&#125;&quot;&gt;</span><br><span class="line">    用户名或密码不正确</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div th:if=&quot;$&#123;param.logout&#125;&quot;&gt;</span><br><span class="line">    你已经退出登录</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;form th:action=&quot;@&#123;/login&#125;&quot; method=&quot;post&quot;&gt;</span><br><span class="line">    &lt;div&gt;&lt;label&gt; 用户名: &lt;input type=&quot;text&quot; name=&quot;username&quot;/&gt; &lt;/label&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;&lt;label&gt; 密&amp;nbsp;&amp;nbsp;&amp;nbsp;码: &lt;input type=&quot;password&quot; name=&quot;password&quot;/&gt; &lt;/label&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;&lt;input type=&quot;submit&quot; value=&quot;登录&quot;/&gt;&lt;/div&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><blockquote><p>【说明】: </p><ul><li><p>该登录页面会将用户名和密码以表单形式提交到”/login”。</p></li><li><p>在Spring Security提供了一个拦截请求并验证的过滤器，在用户未通过认证的情况下会重定向到”/login?error”，并且显示相应的错误信息。注销成功后，Spring Security会将地址重定向到”/login?logout”，我们即可在页面中看到相应的登出信息</p></li></ul></blockquote><h4 id="7-4-修改hello-html"><a href="#7-4-修改hello-html" class="headerlink" title="7.4 修改hello.html"></a>7.4 修改hello.html</h4><p>在认证成功后跳转到hello.html页面，我们希望能够看到登录的用户名，同时允许用户退出登录,因此我们需要修改hello.html页面</p><p>路径：src/main/resources/templates/hello.html<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot; xmlns=&quot;http://www.w3.org/1999/xhtml&quot; xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Hello&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1 th:inline=&quot;text&quot;&gt;Hello [[$&#123;#httpServletRequest.remoteUser&#125;]]&lt;/h1&gt;</span><br><span class="line">    &lt;form th:action=&quot;@&#123;/logout&#125;&quot; method=&quot;post&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;submit&quot; value=&quot;退出登录&quot; /&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><blockquote><p>【说明】: </p><ul><li><p>我们在hello.html页面中使用了HttpServletRequest#getRemoteUser()的thymeleaf集成来显示用户名。</p></li><li><p>页面中退出登录表单会将请求提交到”/logout”，成功注销后程序会重定向到”/login?logout”。</p></li></ul></blockquote><h4 id="7-5-启动应用程序"><a href="#7-5-启动应用程序" class="headerlink" title="7.5 启动应用程序"></a>7.5 启动应用程序</h4><p>通过文章刚开始的 【配置Spring Boot启动类】模块启动应用程序，这里不再过多介绍。</p><h1 id="八、测试"><a href="#八、测试" class="headerlink" title="八、测试"></a>八、测试</h1><h5 id="8-1-应用启动后-在浏览器中访问-http-localhost-8080-就能访问到Index页面"><a href="#8-1-应用启动后-在浏览器中访问-http-localhost-8080-就能访问到Index页面" class="headerlink" title="8.1 应用启动后, 在浏览器中访问 http://localhost:8080. 就能访问到Index页面"></a>8.1 应用启动后, 在浏览器中访问 <a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a>. 就能访问到Index页面</h5><p><img src="http://upload-images.jianshu.io/upload_images/5134062-4a12e015cf465a57?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h5 id="8-2-点击跳转到hello-html页面，会发现没有认证不允许进入，程序自动跳转到登录页"><a href="#8-2-点击跳转到hello-html页面，会发现没有认证不允许进入，程序自动跳转到登录页" class="headerlink" title="8.2 点击跳转到hello.html页面，会发现没有认证不允许进入，程序自动跳转到登录页"></a>8.2 点击跳转到hello.html页面，会发现没有认证不允许进入，程序自动跳转到登录页</h5><p><img src="http://upload-images.jianshu.io/upload_images/5134062-f5ab19da97f82dfc?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h5 id="8-3-我们输入错误的信息会提示用户名或密码不正确，同时地址栏的地址也变成了”-login-error”"><a href="#8-3-我们输入错误的信息会提示用户名或密码不正确，同时地址栏的地址也变成了”-login-error”" class="headerlink" title="8.3 我们输入错误的信息会提示用户名或密码不正确，同时地址栏的地址也变成了”/login?error”"></a>8.3 我们输入错误的信息会提示用户名或密码不正确，同时地址栏的地址也变成了”/login?error”</h5><p><img src="http://upload-images.jianshu.io/upload_images/5134062-edd9087e0c4414d8?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h5 id="8-4-下面我们输入正确的账号登录（用户名：user，密码：123456）"><a href="#8-4-下面我们输入正确的账号登录（用户名：user，密码：123456）" class="headerlink" title="8.4 下面我们输入正确的账号登录（用户名：user，密码：123456）"></a>8.4 下面我们输入正确的账号登录（用户名：user，密码：123456）</h5><p>我们会发现在控制台出现了异常（解决方案：详见底部【常见问题】）<br><img src="http://upload-images.jianshu.io/upload_images/5134062-90f4f9e5f1cf06a5?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h5 id="8-5-异常解决后我们再进行测试已经可以正常地跳转到hello-html页面，并显示了登录的用户名"><a href="#8-5-异常解决后我们再进行测试已经可以正常地跳转到hello-html页面，并显示了登录的用户名" class="headerlink" title="8.5 异常解决后我们再进行测试已经可以正常地跳转到hello.html页面，并显示了登录的用户名"></a>8.5 异常解决后我们再进行测试已经可以正常地跳转到hello.html页面，并显示了登录的用户名</h5><p><img src="http://upload-images.jianshu.io/upload_images/5134062-91db2baf78583665?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h5 id="8-6-最后我们点击退出登录，即可完成注销操作（此时地址栏”-login-logout”，并且跳回登录页面提示”你已经退出登录”）"><a href="#8-6-最后我们点击退出登录，即可完成注销操作（此时地址栏”-login-logout”，并且跳回登录页面提示”你已经退出登录”）" class="headerlink" title="8.6 最后我们点击退出登录，即可完成注销操作（此时地址栏”/login?logout”，并且跳回登录页面提示”你已经退出登录”）"></a>8.6 最后我们点击退出登录，即可完成注销操作（此时地址栏”/login?logout”，并且跳回登录页面提示”你已经退出登录”）</h5><p><img src="http://upload-images.jianshu.io/upload_images/5134062-570d027e2fa15a15?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h1 id="九、总结"><a href="#九、总结" class="headerlink" title="九、总结"></a>九、总结</h1><p>恭喜！你已经开发了一个简单的Spring Security程序。</p><h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><h4 id="【问题一】："><a href="#【问题一】：" class="headerlink" title="【问题一】："></a>【问题一】：</h4><p> 在测试中，我们正常登录时候出现了异常：java.lang.IllegalArgumentException: There is no PasswordEncoder mapped for the id “null”</p><blockquote><p>【解答】：通过问题我们知道该异常来自认证信息WebSecurityConfig的方法configure(AuthenticationManagerBuilder)。所以我们查阅官方文档，发现在spring boot 2.0之上使用的是Spring Security 5.0版本，同时也指出使用密码校验时候需要进行密码加密。</p><p>因此，改动如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&gt; 方法1：在Application.java启动类下加入该方法，关闭密码加密校验.(不推荐)</span><br><span class="line">&gt;  @Bean</span><br><span class="line">&gt;     public static PasswordEncoder passwordEncoder() &#123;</span><br><span class="line">&gt;         return NoOpPasswordEncoder.getInstance();</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt;     </span><br><span class="line">&gt; 方法2：在WebSecurityConfig.java类的configure(AuthenticationManagerBuilder)进行如下改动</span><br><span class="line">&gt;  @Override</span><br><span class="line">&gt;     protected void configure(AuthenticationManagerBuilder auth) throws Exception &#123;</span><br><span class="line">&gt; //      auth.inMemoryAuthentication() // 在内存中进行身份验证</span><br><span class="line">&gt; //              .withUser(&quot;user&quot;)</span><br><span class="line">&gt; //              .password(&quot;password&quot;)</span><br><span class="line">&gt; //              .roles(&quot;USER&quot;);</span><br><span class="line">&gt; </span><br><span class="line">&gt;         auth.inMemoryAuthentication() // 在内存中进行身份验证</span><br><span class="line">&gt;                 .passwordEncoder(new BCryptPasswordEncoder())</span><br><span class="line">&gt;                 .withUser(&quot;user&quot;)</span><br><span class="line">&gt;                 .password(new BCryptPasswordEncoder().encode(&quot;123456&quot;))</span><br><span class="line">&gt;                 .roles(&quot;USER&quot;);</span><br><span class="line">&gt;                 </span><br><span class="line">&gt; //        auth.userDetailsService(userService).passwordEncoder(new BCryptPasswordEncoder());</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p></blockquote><h1 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h1><p>在我们开发的过程中，我们经常会遇到修改一点点东西时候，都需要重启操作来生效。因此，spring boot为我们提供了一个devTool热更新工具，无需重启即可生效</p><h5 id="pom-xml中引入相关jar"><a href="#pom-xml中引入相关jar" class="headerlink" title="pom.xml中引入相关jar"></a>pom.xml中引入相关jar</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.0.1.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/parent&gt;</span><br><span class="line">&lt;properties&gt;</span><br><span class="line">    &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">    &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</span><br><span class="line">&lt;/properties&gt;</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line"> ... </span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br><span class="line">...</span><br><span class="line">&lt;dependencies&gt;</span><br></pre></td></tr></table></figure><h5 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h5><blockquote><p>【提示】: 由于我自己使用的是idea进行开发,因此对eclipse的引入是否需要快捷键并不是很清楚，提供了相关链接</p></blockquote><p>IDEA使用：</p><ul><li>修改了java类的地方，使用Ctrl+Shift+F9进行热更新</li><li>静态页面/模板页面，使用Ctrl+F9进行热更新</li><li>快捷键使用后不生效？前往File-Settings-Compiler-Build Project automatically选项开始idea自动编译</li></ul><p>eclipse使用：</p><ul><li>直接引入</li><li>不生效？<a href="https://www.cnblogs.com/xiangchun/p/8442487.html" target="_blank" rel="noopener">Eclipse热部署</a></li></ul><h1 id="附录：HttpSecurity类的常用方法"><a href="#附录：HttpSecurity类的常用方法" class="headerlink" title="附录：HttpSecurity类的常用方法"></a>附录：HttpSecurity类的常用方法</h1><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>openidLogin()</td><td>基于OpenId验证</td></tr><tr><td>headers()</td><td>将安全头添加到响应</td></tr><tr><td>cors()</td><td>跨域配置</td></tr><tr><td>sessionManagement()</td><td>session会话管理</td></tr><tr><td>portMapper()</td><td>配置一个PortMapper(HttpSecurity#(getSharedObject(class)))，供SecurityConfigurer对象使用 PortMapper 从 HTTP 重定向到 HTTPS 或者从 HTTPS 重定向到 HTTP。默认情况下，Spring Security使用一个PortMapperImpl映射 HTTP 端口8080到 HTTPS 端口8443，HTTP 端口80到 HTTPS 端口443</td></tr><tr><td>jee()</td><td>配置容器预认证，默认为Servlet容器进行管理</td></tr><tr><td>x509()</td><td>配置x509认证</td></tr><tr><td>rememberMe()</td><td>配置“记住我”的验证</td></tr><tr><td>authorizeRequests()</td><td>允许HttpServletRequest限制访问</td></tr><tr><td>requestCache()</td><td>允许配置请求缓存</td></tr><tr><td>exceptionHandling()</td><td>允许配置错误处理</td></tr><tr><td>logout()</td><td>退出登录。访问URL”/ logout”，使HTTP Session无效来清除用户，清除已配置的任何#rememberMe()身份验证，清除SecurityContextHolder，然后重定向到”/login?logout”</td></tr><tr><td>anonymous()</td><td>允许配置匿名用户访问。默认情况下，匿名用户将使用org.springframework.security.authentication.AnonymousAuthenticationToken表示，并包含角色 “ROLE_ANONYMOUS”</td></tr><tr><td>formLogin()</td><td>指定用于表单身份验证。</td></tr><tr><td>oauth2Login()</td><td>用于OAuth 2.0 或OpenID的身份验证</td></tr><tr><td>requiresChannel()</td><td>配置通道安全。</td></tr><tr><td>httpBasic()</td><td>配置Http Basic验证</td></tr><tr><td>addFilterAt()</td><td>在指定的Filter类位置添加过滤器</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、Spring-Security-概述&quot;&gt;&lt;a href=&quot;#一、Spring-Security-概述&quot; class=&quot;headerlink&quot; title=&quot;一、Spring Security 概述&quot;&gt;&lt;/a&gt;一、Spring Security 概述&lt;/h1&gt;&lt;
      
    
    </summary>
    
      <category term="后端" scheme="https://blog.ffspace.cn/categories/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="Spring Security" scheme="https://blog.ffspace.cn/categories/%E5%90%8E%E7%AB%AF/Spring-Security/"/>
    
    
      <category term="Spring" scheme="https://blog.ffspace.cn/tags/Spring/"/>
    
      <category term="Spring Security" scheme="https://blog.ffspace.cn/tags/Spring-Security/"/>
    
  </entry>
  
</feed>
